# Vana SDK Next.js Demo - Environment Configuration Example
# Copy this file to .env.local and fill in your values

# ====================================
# RELAYER CONFIGURATION
# ====================================
# The relayer pays gas fees for users' transactions
# WARNING: The default private key below is publicly known - NEVER use on mainnet!
# For production, use a securely managed private key with sufficient VANA tokens
RELAYER_PRIVATE_KEY=0x3f572ac0f0671db5231100918c22296306be0ed77d4353f80ad8b4ea9317cf51

# ====================================
# BLOCKCHAIN CONFIGURATION
# ====================================
# Moksha Testnet Configuration
CHAIN_RPC_URL=https://rpc.moksha.vana.org
CHAIN_ID=14800

# For Vana Mainnet, use:
# CHAIN_RPC_URL=https://rpc.vana.org
# CHAIN_ID=1480

# ====================================
# WALLETCONNECT (OPTIONAL)
# ====================================
# Get your project ID at https://cloud.walletconnect.com/
# This enables WalletConnect support for mobile wallets
NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID=your_project_id_here

# ====================================
# SUBGRAPH CONFIGURATION
# ====================================
# The Graph Protocol endpoint for querying blockchain data
NEXT_PUBLIC_SUBGRAPH_URL=https://api.goldsky.com/api/public/project_cm168cz887zva010j39il7a6p/subgraphs/vana/7.0.5/gn

# ====================================
# PERSONAL SERVER CONFIGURATION
# ====================================
NEXT_PUBLIC_PERSONAL_SERVER_BASE_URL=https://vana-personal-server-432753364585.europe-west1.run.app/api/v1


# ====================================
# PINATA IPFS CONFIGURATION
# ====================================
# Pinata provides decentralized storage for encrypted user data
# Sign up at https://app.pinata.cloud and create an API key
#
# Required permissions when creating your Pinata API key:
# ✅ Files - Write (for uploading encrypted data)
# ✅ Gateways - Read (for retrieving data)
# ✅ pinFileToIPFS (legacy endpoint)
# ✅ pinByHash (legacy endpoint)
#
# After creating the key, you'll receive a JWT token like:
# eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Server-side JWT (for relayer permission parameters)
PINATA_JWT=your_pinata_jwt_token_here

# Optional: Custom gateway URL (default is fine for most users)
PINATA_GATEWAY_URL=https://gateway.pinata.cloud

# ====================================
# GOOGLE DRIVE CONFIGURATION
# ====================================
# Google Drive OAuth integration for encrypted file storage
# Create a Google Cloud project at https://console.cloud.google.com/
# Enable the Google Drive API
# Create OAuth 2.0 credentials (Web application)
# Add authorized redirect URIs: http://localhost:3000/api/auth/google-drive/callback
#
# Required OAuth scopes:
# ✅ https://www.googleapis.com/auth/drive.file
# ✅ https://www.googleapis.com/auth/drive.metadata.readonly

# OAuth client credentials (from Google Cloud Console)
GOOGLE_DRIVE_CLIENT_ID=your_google_client_id.apps.googleusercontent.com
GOOGLE_DRIVE_CLIENT_SECRET=your_google_client_secret

# OAuth redirect URI (must match what's configured in Google Cloud Console)
# NOTE: Update the port to match your dev server (check npm run dev output)
GOOGLE_DRIVE_REDIRECT_URI=http://localhost:3001/api/auth/google-drive/callback

# ====================================
# IMPORTANT SECURITY NOTES
# ====================================
# 1. NEVER commit .env.local to version control
# 2. The default RELAYER_PRIVATE_KEY is for testing only
# 3. In production, use environment variables from your hosting provider
# 4. Ensure your relayer wallet has sufficient VANA tokens for gas
# 5. Keep your Pinata JWT token secret - it provides write access to your IPFS storage
# 6. Keep your Google Drive client credentials secure - they provide OAuth access

# ====================================
# PERSONAL SERVER CONFIGURATION
# ====================================
# Application private key for personal server requests (SERVER-SIDE ONLY)
# SECURITY: Never expose this to the client - do not prefix with NEXT_PUBLIC_
APPLICATION_PRIVATE_KEY=your_application_private_key_here

# Replicate API token for personal server integration (SERVER-SIDE ONLY)
# SECURITY: This should also be server-side only for production
REPLICATE_API_TOKEN=your_replicate_api_token_here

# ====================================
# FEATURE FLAGS
# ====================================
# The system automatically detects available services:
# - If PINATA_JWT is configured: Uses real IPFS storage
# - If GOOGLE_DRIVE_CLIENT_ID is configured: Enables Google Drive OAuth
# - If not configured: Falls back to in-memory storage (development only)
# - Check /api/health endpoint to see which features are enabled