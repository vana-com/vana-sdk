/**
 * Generated TypeScript types for contract events
 *
 * @generated 2025-08-24T00:15:35.098Z
 * @mappings-hash 78104204
 *
 * DO NOT EDIT - This file is generated by scripts/generate-types.ts
 */

// Contract names union
export type Contract =
  | 'ComputeEngine'
  | 'ComputeInstructionRegistry'
  | 'DAT'
  | 'DATFactory'
  | 'DATPausable'
  | 'DATVotes'
  | 'DLPPerformance'
  | 'DLPRegistry'
  | 'DLPRegistryTreasury'
  | 'DLPRewardDeployer'
  | 'DLPRewardDeployerTreasury'
  | 'DLPRewardSwap'
  | 'DataPortabilityGrantees'
  | 'DataPortabilityPermissions'
  | 'DataPortabilityServers'
  | 'DataRefinerRegistry'
  | 'DataRegistry'
  | 'QueryEngine'
  | 'SwapHelper'
  | 'TeePool'
  | 'TeePoolDedicatedGpu'
  | 'TeePoolDedicatedStandard'
  | 'TeePoolEphemeralStandard'
  | 'TeePoolPersistentGpu'
  | 'TeePoolPersistentStandard'
  | 'TeePoolPhala'
  | 'VanaEpoch'
  | 'VanaPoolEntity'
  | 'VanaPoolStaking'
  | 'VanaPoolTreasury';

// Function names per contract
export type Fn<C extends Contract> = C extends 'ComputeEngine'
  ?
      | 'cancelJob'
      | 'deposit'
      | 'executePayment'
      | 'grantRole'
      | 'initialize'
      | 'pause'
      | 'registerJob'
      | 'renounceRole'
      | 'revokeRole'
      | 'submitJob'
      | 'unpause'
      | 'updateJobStatus'
      | 'upgradeToAndCall'
      | 'withdraw'
  : C extends 'ComputeInstructionRegistry'
    ?
        | 'addComputeInstruction'
        | 'grantRole'
        | 'initialize'
        | 'pause'
        | 'removeComputeInstruction'
        | 'renounceRole'
        | 'revokeRole'
        | 'unpause'
        | 'updateComputeInstruction'
        | 'upgradeToAndCall'
    : C extends 'DAT'
      ?
          | 'approve'
          | 'blockAddress'
          | 'burn'
          | 'mint'
          | 'pause'
          | 'transfer'
          | 'transferFrom'
          | 'unblockAddress'
          | 'unpause'
          | 'upgradeToAndCall'
      : C extends 'DATFactory'
        ?
            | 'createDAT'
            | 'createToken'
            | 'grantRole'
            | 'initialize'
            | 'pause'
            | 'renounceRole'
            | 'revokeRole'
            | 'unpause'
            | 'updateDATTemplate'
            | 'updateFactoryFee'
            | 'upgradeToAndCall'
        : C extends 'DATPausable'
          ?
              | 'approve'
              | 'blockAddress'
              | 'burn'
              | 'mint'
              | 'pause'
              | 'transfer'
              | 'transferFrom'
              | 'unblockAddress'
              | 'unpause'
              | 'upgradeToAndCall'
          : C extends 'DATVotes'
            ?
                | 'approve'
                | 'blockAddress'
                | 'burn'
                | 'delegate'
                | 'delegateBySig'
                | 'mint'
                | 'pause'
                | 'transfer'
                | 'transferFrom'
                | 'unblockAddress'
                | 'unpause'
                | 'upgradeToAndCall'
            : C extends 'DLPPerformance'
              ?
                  | 'grantRole'
                  | 'initialize'
                  | 'overrideEpochDlpPenalty'
                  | 'overrideEpochPerformances'
                  | 'pause'
                  | 'renounceRole'
                  | 'revokeRole'
                  | 'saveEpochPerformances'
                  | 'unpause'
                  | 'updateMetricWeights'
                  | 'upgradeToAndCall'
              : C extends 'DLPRegistry'
                ?
                    | 'deregisterDlp'
                    | 'dlpConsumerVotesSubmitted'
                    | 'dlpOwnerVotesSubmitted'
                    | 'dlpUnregistrationRequested'
                    | 'grantRole'
                    | 'initialize'
                    | 'migrateDlpData'
                    | 'pause'
                    | 'registerDlp'
                    | 'renounceRole'
                    | 'revokeRole'
                    | 'unpause'
                    | 'unregisterDlp'
                    | 'unverifyDlp'
                    | 'updateDlp'
                    | 'updateDlpOwner'
                    | 'updateDlpRegistrationDepositAmount'
                    | 'updateDlpToken'
                    | 'updateDlpTokenAndVerification'
                    | 'updateDlpVerificationBlock'
                    | 'upgradeToAndCall'
                : C extends 'DLPRegistryTreasury'
                  ?
                      | 'allocateFunds'
                      | 'deposit'
                      | 'grantRole'
                      | 'initialize'
                      | 'pause'
                      | 'renounceRole'
                      | 'revokeRole'
                      | 'transfer'
                      | 'unpause'
                      | 'updateBudget'
                      | 'upgradeToAndCall'
                      | 'withdraw'
                  : C extends 'DLPRewardDeployer'
                    ?
                        | 'distributeRewards'
                        | 'grantRole'
                        | 'initialize'
                        | 'pause'
                        | 'renounceRole'
                        | 'revokeRole'
                        | 'unpause'
                        | 'upgradeToAndCall'
                        | 'withdrawEpochDlpPenaltyAmount'
                    : C extends 'DLPRewardDeployerTreasury'
                      ?
                          | 'allocateRewards'
                          | 'deposit'
                          | 'grantRole'
                          | 'initialize'
                          | 'pause'
                          | 'renounceRole'
                          | 'revokeRole'
                          | 'transfer'
                          | 'unpause'
                          | 'updateAllocation'
                          | 'upgradeToAndCall'
                          | 'withdraw'
                      : C extends 'DLPRewardSwap'
                        ?
                            | 'addLiquidity'
                            | 'grantRole'
                            | 'initialize'
                            | 'pause'
                            | 'removeLiquidity'
                            | 'renounceRole'
                            | 'revokeRole'
                            | 'splitRewardSwap'
                            | 'swap'
                            | 'unpause'
                            | 'updateSwapFee'
                            | 'upgradeToAndCall'
                        : C extends 'DataPortabilityGrantees'
                          ?
                              | 'addPermissionToGrantee'
                              | 'grantRole'
                              | 'initialize'
                              | 'pause'
                              | 'registerGrantee'
                              | 'removePermissionFromGrantee'
                              | 'renounceRole'
                              | 'revokeRole'
                              | 'unpause'
                              | 'upgradeToAndCall'
                          : C extends 'DataPortabilityPermissions'
                            ?
                                | 'addPermission'
                                | 'addServerFilesAndPermissions'
                                | 'grantRole'
                                | 'initialize'
                                | 'pause'
                                | 'renounceRole'
                                | 'revokePermission'
                                | 'revokePermissionWithSignature'
                                | 'revokeRole'
                                | 'unpause'
                                | 'upgradeToAndCall'
                            : C extends 'DataPortabilityServers'
                              ?
                                  | 'addAndTrustServerByManager'
                                  | 'addAndTrustServerWithSignature'
                                  | 'addServerWithSignature'
                                  | 'grantRole'
                                  | 'initialize'
                                  | 'pause'
                                  | 'renounceRole'
                                  | 'revokeRole'
                                  | 'trustServer'
                                  | 'trustServerByManager'
                                  | 'trustServerWithSignature'
                                  | 'unpause'
                                  | 'untrustServer'
                                  | 'untrustServerByManager'
                                  | 'untrustServerWithSignature'
                                  | 'updateServer'
                                  | 'upgradeToAndCall'
                              : C extends 'DataRefinerRegistry'
                                ?
                                    | 'addRefinementService'
                                    | 'addRefiner'
                                    | 'addRefinerWithSchemaId'
                                    | 'addSchema'
                                    | 'grantRole'
                                    | 'initialize'
                                    | 'pause'
                                    | 'removeRefinementService'
                                    | 'renounceRole'
                                    | 'revokeRole'
                                    | 'unpause'
                                    | 'updateDlpRefinersOwner'
                                    | 'updateRefinerOwner'
                                    | 'updateSchemaId'
                                    | 'upgradeToAndCall'
                                : C extends 'DataRegistry'
                                  ?
                                      | 'addFile'
                                      | 'addFilePermission'
                                      | 'addFilePermissionsAndSchema'
                                      | 'addFileWithPermissions'
                                      | 'addFileWithPermissionsAndSchema'
                                      | 'addFileWithSchema'
                                      | 'addFileWithSignature'
                                      | 'addProof'
                                      | 'addRefinementWithPermission'
                                      | 'addRefinerWithSchemaId'
                                      | 'addSchema'
                                      | 'deleteFile'
                                      | 'grantRole'
                                      | 'initialize'
                                      | 'pause'
                                      | 'renounceRole'
                                      | 'revokeRole'
                                      | 'unpause'
                                      | 'updateFileMetadata'
                                      | 'updateSchemaId'
                                      | 'upgradeToAndCall'
                                  : C extends 'QueryEngine'
                                    ?
                                        | 'cacheResult'
                                        | 'claimDlpPayment'
                                        | 'executeQuery'
                                        | 'grantRole'
                                        | 'initialize'
                                        | 'invalidateCache'
                                        | 'pause'
                                        | 'renounceRole'
                                        | 'revokeRole'
                                        | 'unpause'
                                        | 'updatePermissionApproval'
                                        | 'updateQueryLimit'
                                        | 'upgradeToAndCall'
                                    : C extends 'SwapHelper'
                                      ?
                                          | 'getQuote'
                                          | 'grantRole'
                                          | 'initialize'
                                          | 'pause'
                                          | 'renounceRole'
                                          | 'revokeRole'
                                          | 'swap'
                                          | 'unpause'
                                          | 'updateRouter'
                                          | 'updateSlippage'
                                          | 'upgradeToAndCall'
                                      : C extends 'TeePool'
                                        ?
                                            | 'addJob'
                                            | 'cancelJob'
                                            | 'claimReward'
                                            | 'submitProof'
                                            | 'updateFeeRecipient'
                                            | 'updateJobTimeout'
                                            | 'updateMinJobDuration'
                                        : C extends 'TeePoolDedicatedGpu'
                                          ?
                                              | 'addProof'
                                              | 'addTee'
                                              | 'cancelJob'
                                              | 'claim'
                                              | 'grantRole'
                                              | 'initialize'
                                              | 'pause'
                                              | 'removeJob'
                                              | 'removeTee'
                                              | 'renounceRole'
                                              | 'revokeRole'
                                              | 'submitJob'
                                              | 'unpause'
                                              | 'upgradeToAndCall'
                                          : C extends 'TeePoolDedicatedStandard'
                                            ?
                                                | 'addProof'
                                                | 'addTee'
                                                | 'cancelJob'
                                                | 'claim'
                                                | 'grantRole'
                                                | 'initialize'
                                                | 'pause'
                                                | 'removeJob'
                                                | 'removeTee'
                                                | 'renounceRole'
                                                | 'revokeRole'
                                                | 'submitJob'
                                                | 'unpause'
                                                | 'upgradeToAndCall'
                                            : C extends 'TeePoolEphemeralStandard'
                                              ?
                                                  | 'addProof'
                                                  | 'addTee'
                                                  | 'cancelJob'
                                                  | 'claim'
                                                  | 'grantRole'
                                                  | 'initialize'
                                                  | 'pause'
                                                  | 'removeJob'
                                                  | 'removeTee'
                                                  | 'renounceRole'
                                                  | 'revokeRole'
                                                  | 'submitJob'
                                                  | 'unpause'
                                                  | 'upgradeToAndCall'
                                              : C extends 'TeePoolPersistentGpu'
                                                ?
                                                    | 'addProof'
                                                    | 'addTee'
                                                    | 'cancelJob'
                                                    | 'claim'
                                                    | 'grantRole'
                                                    | 'initialize'
                                                    | 'pause'
                                                    | 'removeJob'
                                                    | 'removeTee'
                                                    | 'renounceRole'
                                                    | 'revokeRole'
                                                    | 'submitJob'
                                                    | 'unpause'
                                                    | 'upgradeToAndCall'
                                                : C extends 'TeePoolPersistentStandard'
                                                  ?
                                                      | 'addProof'
                                                      | 'addTee'
                                                      | 'cancelJob'
                                                      | 'claim'
                                                      | 'grantRole'
                                                      | 'initialize'
                                                      | 'pause'
                                                      | 'removeJob'
                                                      | 'removeTee'
                                                      | 'renounceRole'
                                                      | 'revokeRole'
                                                      | 'submitJob'
                                                      | 'unpause'
                                                      | 'upgradeToAndCall'
                                                  : C extends 'TeePoolPhala'
                                                    ?
                                                        | 'addProof'
                                                        | 'addTee'
                                                        | 'cancelJob'
                                                        | 'claim'
                                                        | 'grantRole'
                                                        | 'initialize'
                                                        | 'pause'
                                                        | 'removeTee'
                                                        | 'renounceRole'
                                                        | 'requestContributionProof'
                                                        | 'revokeRole'
                                                        | 'submitJob'
                                                        | 'unpause'
                                                        | 'upgradeToAndCall'
                                                    : C extends 'VanaEpoch'
                                                      ?
                                                          | 'forceFinalizedEpoch'
                                                          | 'grantRole'
                                                          | 'initialize'
                                                          | 'overrideEpochDlpReward'
                                                          | 'pause'
                                                          | 'renounceRole'
                                                          | 'revokeRole'
                                                          | 'saveEpochDlpRewards'
                                                          | 'unpause'
                                                          | 'updateDaySize'
                                                          | 'updateEpoch'
                                                          | 'updateEpochRewardAmount'
                                                          | 'updateEpochSize'
                                                          | 'upgradeToAndCall'
                                                      : C extends 'VanaPoolEntity'
                                                        ?
                                                            | 'addRewards'
                                                            | 'createEntity'
                                                            | 'grantRole'
                                                            | 'initialize'
                                                            | 'pause'
                                                            | 'processRewards'
                                                            | 'registerEntity'
                                                            | 'renounceRole'
                                                            | 'revokeRole'
                                                            | 'unpause'
                                                            | 'unregisterEntity'
                                                            | 'updateEntity'
                                                            | 'updateEntityMaxAPY'
                                                            | 'updateEntityMetadata'
                                                            | 'upgradeToAndCall'
                                                        : C extends 'VanaPoolStaking'
                                                          ?
                                                              | 'claimRewards'
                                                              | 'grantRole'
                                                              | 'initialize'
                                                              | 'pause'
                                                              | 'registerEntityStake'
                                                              | 'renounceRole'
                                                              | 'revokeRole'
                                                              | 'stake'
                                                              | 'unpause'
                                                              | 'unstake'
                                                              | 'updateMinStakeAmount'
                                                              | 'upgradeToAndCall'
                                                          : C extends 'VanaPoolTreasury'
                                                            ?
                                                                | 'allocateFunds'
                                                                | 'deposit'
                                                                | 'grantRole'
                                                                | 'initialize'
                                                                | 'pause'
                                                                | 'renounceRole'
                                                                | 'revokeRole'
                                                                | 'unpause'
                                                                | 'updateBudget'
                                                                | 'updateTreasuryAddress'
                                                                | 'upgradeToAndCall'
                                                                | 'withdraw'
                                                            : never;

// Helper for joining contract and function names
export type Join<C extends string, F extends string> = `${C}.${F}`;

// Flat mapping of "Contract.function" to event names
export type EventNameMap = {
  'ComputeEngine.cancelJob': 'JobCanceled';
  'ComputeEngine.deposit': 'Deposit';
  'ComputeEngine.executePayment': 'PaymentExecuted';
  'ComputeEngine.grantRole': 'RoleGranted';
  'ComputeEngine.initialize': 'Initialized';
  'ComputeEngine.pause': 'Paused';
  'ComputeEngine.registerJob': 'JobRegistered';
  'ComputeEngine.renounceRole': 'RoleRevoked';
  'ComputeEngine.revokeRole': 'RoleRevoked';
  'ComputeEngine.submitJob': 'JobSubmitted';
  'ComputeEngine.unpause': 'Unpaused';
  'ComputeEngine.updateJobStatus': 'JobStatusUpdated';
  'ComputeEngine.upgradeToAndCall': 'Upgraded';
  'ComputeEngine.withdraw': 'Transfer' | 'Withdraw';
  'ComputeInstructionRegistry.addComputeInstruction': 'ComputeInstructionAdded';
  'ComputeInstructionRegistry.grantRole': 'RoleGranted';
  'ComputeInstructionRegistry.initialize': 'Initialized';
  'ComputeInstructionRegistry.pause': 'Paused';
  'ComputeInstructionRegistry.removeComputeInstruction': 'ComputeInstructionRemoved';
  'ComputeInstructionRegistry.renounceRole': 'RoleRevoked';
  'ComputeInstructionRegistry.revokeRole': 'RoleRevoked';
  'ComputeInstructionRegistry.unpause': 'Unpaused';
  'ComputeInstructionRegistry.updateComputeInstruction': 'ComputeInstructionUpdated';
  'ComputeInstructionRegistry.upgradeToAndCall': 'Upgraded';
  'DAT.approve': 'Approval';
  'DAT.blockAddress': 'AddressBlocked';
  'DAT.burn': never;
  'DAT.mint': never;
  'DAT.pause': 'Paused';
  'DAT.transfer': 'Transfer';
  'DAT.transferFrom': 'Transfer';
  'DAT.unblockAddress': 'AddressUnblocked';
  'DAT.unpause': 'Unpaused';
  'DAT.upgradeToAndCall': 'Upgraded';
  'DATFactory.createDAT': 'DATCreated';
  'DATFactory.createToken': 'DATCreated';
  'DATFactory.grantRole': 'RoleGranted';
  'DATFactory.initialize': 'Initialized';
  'DATFactory.pause': 'Paused';
  'DATFactory.renounceRole': 'RoleRevoked';
  'DATFactory.revokeRole': 'RoleRevoked';
  'DATFactory.unpause': 'Unpaused';
  'DATFactory.updateDATTemplate': never;
  'DATFactory.updateFactoryFee': never;
  'DATFactory.upgradeToAndCall': 'Upgraded';
  'DATPausable.approve': 'Approval';
  'DATPausable.blockAddress': 'AddressBlocked';
  'DATPausable.burn': never;
  'DATPausable.mint': never;
  'DATPausable.pause': 'Paused';
  'DATPausable.transfer': 'Transfer';
  'DATPausable.transferFrom': 'Transfer';
  'DATPausable.unblockAddress': 'AddressUnblocked';
  'DATPausable.unpause': 'Unpaused';
  'DATPausable.upgradeToAndCall': 'Upgraded';
  'DATVotes.approve': 'Approval';
  'DATVotes.blockAddress': 'AddressBlocked';
  'DATVotes.burn': never;
  'DATVotes.delegate': 'DelegateChanged' | 'DelegateVotesChanged';
  'DATVotes.delegateBySig': 'DelegateChanged' | 'DelegateVotesChanged';
  'DATVotes.mint': never;
  'DATVotes.pause': 'Paused';
  'DATVotes.transfer': 'Transfer';
  'DATVotes.transferFrom': 'Transfer';
  'DATVotes.unblockAddress': 'AddressUnblocked';
  'DATVotes.unpause': 'Unpaused';
  'DATVotes.upgradeToAndCall': 'Upgraded';
  'DLPPerformance.grantRole': 'RoleGranted';
  'DLPPerformance.initialize': 'Initialized';
  'DLPPerformance.overrideEpochDlpPenalty': 'EpochDlpPenaltyUpdated';
  'DLPPerformance.overrideEpochPerformances': 'EpochDlpPerformancesOverridden';
  'DLPPerformance.pause': 'Paused';
  'DLPPerformance.renounceRole': 'RoleRevoked';
  'DLPPerformance.revokeRole': 'RoleRevoked';
  'DLPPerformance.saveEpochPerformances': 'EpochDlpPerformancesSaved';
  'DLPPerformance.unpause': 'Unpaused';
  'DLPPerformance.updateMetricWeights': 'MetricWeightsUpdated';
  'DLPPerformance.upgradeToAndCall': 'Upgraded';
  'DLPRegistry.deregisterDlp': 'DlpStatusUpdated';
  'DLPRegistry.dlpConsumerVotesSubmitted': 'DlpConsumerVotesSubmitted';
  'DLPRegistry.dlpOwnerVotesSubmitted': 'DlpOwnerVotesSubmitted';
  'DLPRegistry.dlpUnregistrationRequested': 'DlpUnregistrationRequested';
  'DLPRegistry.grantRole': 'RoleGranted';
  'DLPRegistry.initialize': 'Initialized';
  'DLPRegistry.migrateDlpData': 'DlpRegistered';
  'DLPRegistry.pause': 'Paused';
  'DLPRegistry.registerDlp': 'DlpRegistered';
  'DLPRegistry.renounceRole': 'RoleRevoked';
  'DLPRegistry.revokeRole': 'RoleRevoked';
  'DLPRegistry.unpause': 'Unpaused';
  'DLPRegistry.unregisterDlp': 'DlpUnregistered';
  'DLPRegistry.unverifyDlp': 'DlpVerificationBlockUpdated';
  'DLPRegistry.updateDlp': 'DlpUpdated';
  'DLPRegistry.updateDlpOwner': 'DlpOwnerUpdated';
  'DLPRegistry.updateDlpRegistrationDepositAmount': 'DlpRegistrationDepositAmountUpdated';
  'DLPRegistry.updateDlpToken': 'DlpTokenUpdated';
  'DLPRegistry.updateDlpTokenAndVerification': 'DlpTokenUpdated' | 'DlpVerificationBlockUpdated';
  'DLPRegistry.updateDlpVerificationBlock': 'DlpVerificationBlockUpdated';
  'DLPRegistry.upgradeToAndCall': 'Upgraded';
  'DLPRegistryTreasury.allocateFunds': never;
  'DLPRegistryTreasury.deposit': never;
  'DLPRegistryTreasury.grantRole': 'RoleGranted';
  'DLPRegistryTreasury.initialize': 'Initialized';
  'DLPRegistryTreasury.pause': 'Paused';
  'DLPRegistryTreasury.renounceRole': 'RoleRevoked';
  'DLPRegistryTreasury.revokeRole': 'RoleRevoked';
  'DLPRegistryTreasury.transfer': 'Transfer';
  'DLPRegistryTreasury.unpause': 'Unpaused';
  'DLPRegistryTreasury.updateBudget': never;
  'DLPRegistryTreasury.upgradeToAndCall': 'Upgraded';
  'DLPRegistryTreasury.withdraw': never;
  'DLPRewardDeployer.distributeRewards': 'EpochDlpRewardDistributed';
  'DLPRewardDeployer.grantRole': 'RoleGranted';
  'DLPRewardDeployer.initialize': 'Initialized';
  'DLPRewardDeployer.pause': 'Paused';
  'DLPRewardDeployer.renounceRole': 'RoleRevoked';
  'DLPRewardDeployer.revokeRole': 'RoleRevoked';
  'DLPRewardDeployer.unpause': 'Unpaused';
  'DLPRewardDeployer.upgradeToAndCall': 'Upgraded';
  'DLPRewardDeployer.withdrawEpochDlpPenaltyAmount': 'EpochDlpPenaltyDistributed';
  'DLPRewardDeployerTreasury.allocateRewards': never;
  'DLPRewardDeployerTreasury.deposit': never;
  'DLPRewardDeployerTreasury.grantRole': 'RoleGranted';
  'DLPRewardDeployerTreasury.initialize': 'Initialized';
  'DLPRewardDeployerTreasury.pause': 'Paused';
  'DLPRewardDeployerTreasury.renounceRole': 'RoleRevoked';
  'DLPRewardDeployerTreasury.revokeRole': 'RoleRevoked';
  'DLPRewardDeployerTreasury.transfer': 'Transfer';
  'DLPRewardDeployerTreasury.unpause': 'Unpaused';
  'DLPRewardDeployerTreasury.updateAllocation': never;
  'DLPRewardDeployerTreasury.upgradeToAndCall': 'Upgraded';
  'DLPRewardDeployerTreasury.withdraw': never;
  'DLPRewardSwap.addLiquidity': never;
  'DLPRewardSwap.grantRole': 'RoleGranted';
  'DLPRewardSwap.initialize': 'Initialized';
  'DLPRewardSwap.pause': 'Paused';
  'DLPRewardSwap.removeLiquidity': never;
  'DLPRewardSwap.renounceRole': 'RoleRevoked';
  'DLPRewardSwap.revokeRole': 'RoleRevoked';
  'DLPRewardSwap.splitRewardSwap': 'Reward';
  'DLPRewardSwap.swap': never;
  'DLPRewardSwap.unpause': 'Unpaused';
  'DLPRewardSwap.updateSwapFee': never;
  'DLPRewardSwap.upgradeToAndCall': 'Upgraded';
  'DataPortabilityGrantees.addPermissionToGrantee': never;
  'DataPortabilityGrantees.grantRole': 'RoleGranted';
  'DataPortabilityGrantees.initialize': 'Initialized';
  'DataPortabilityGrantees.pause': 'Paused';
  'DataPortabilityGrantees.registerGrantee': 'GranteeRegistered';
  'DataPortabilityGrantees.removePermissionFromGrantee': never;
  'DataPortabilityGrantees.renounceRole': 'RoleRevoked';
  'DataPortabilityGrantees.revokeRole': 'RoleRevoked';
  'DataPortabilityGrantees.unpause': 'Unpaused';
  'DataPortabilityGrantees.upgradeToAndCall': 'Upgraded';
  'DataPortabilityPermissions.addPermission': 'PermissionAdded';
  'DataPortabilityPermissions.addServerFilesAndPermissions': 'PermissionAdded';
  'DataPortabilityPermissions.grantRole': 'RoleGranted';
  'DataPortabilityPermissions.initialize': 'Initialized';
  'DataPortabilityPermissions.pause': 'Paused';
  'DataPortabilityPermissions.renounceRole': 'RoleRevoked';
  'DataPortabilityPermissions.revokePermission': 'PermissionRevoked';
  'DataPortabilityPermissions.revokePermissionWithSignature': 'PermissionRevoked';
  'DataPortabilityPermissions.revokeRole': 'RoleRevoked';
  'DataPortabilityPermissions.unpause': 'Unpaused';
  'DataPortabilityPermissions.upgradeToAndCall': 'Upgraded';
  'DataPortabilityServers.addAndTrustServerByManager': 'ServerRegistered' | 'ServerTrusted';
  'DataPortabilityServers.addAndTrustServerWithSignature': 'ServerRegistered' | 'ServerTrusted';
  'DataPortabilityServers.addServerWithSignature': 'ServerRegistered';
  'DataPortabilityServers.grantRole': 'RoleGranted';
  'DataPortabilityServers.initialize': 'Initialized';
  'DataPortabilityServers.pause': 'Paused';
  'DataPortabilityServers.renounceRole': 'RoleRevoked';
  'DataPortabilityServers.revokeRole': 'RoleRevoked';
  'DataPortabilityServers.trustServer': 'ServerTrusted';
  'DataPortabilityServers.trustServerByManager': 'ServerTrusted';
  'DataPortabilityServers.trustServerWithSignature': 'ServerTrusted';
  'DataPortabilityServers.unpause': 'Unpaused';
  'DataPortabilityServers.untrustServer': 'ServerUntrusted';
  'DataPortabilityServers.untrustServerByManager': 'ServerUntrusted';
  'DataPortabilityServers.untrustServerWithSignature': 'ServerUntrusted';
  'DataPortabilityServers.updateServer': 'ServerUpdated';
  'DataPortabilityServers.upgradeToAndCall': 'Upgraded';
  'DataRefinerRegistry.addRefinementService': never;
  'DataRefinerRegistry.addRefiner': 'RefinerAdded';
  'DataRefinerRegistry.addRefinerWithSchemaId': 'RefinerAdded';
  'DataRefinerRegistry.addSchema': 'SchemaAdded';
  'DataRefinerRegistry.grantRole': 'RoleGranted';
  'DataRefinerRegistry.initialize': 'Initialized';
  'DataRefinerRegistry.pause': 'Paused';
  'DataRefinerRegistry.removeRefinementService': never;
  'DataRefinerRegistry.renounceRole': 'RoleRevoked';
  'DataRefinerRegistry.revokeRole': 'RoleRevoked';
  'DataRefinerRegistry.unpause': 'Unpaused';
  'DataRefinerRegistry.updateDlpRefinersOwner': never;
  'DataRefinerRegistry.updateRefinerOwner': never;
  'DataRefinerRegistry.updateSchemaId': never;
  'DataRefinerRegistry.upgradeToAndCall': 'Upgraded';
  'DataRegistry.addFile': 'FileAdded';
  'DataRegistry.addFilePermission': 'PermissionGranted';
  'DataRegistry.addFilePermissionsAndSchema': 'FileAddedV2' | 'PermissionGranted';
  'DataRegistry.addFileWithPermissions': 'FileAdded' | 'PermissionGranted';
  'DataRegistry.addFileWithPermissionsAndSchema': 'FileAdded' | 'PermissionGranted';
  'DataRegistry.addFileWithSchema': 'FileAdded';
  'DataRegistry.addFileWithSignature': 'FileAdded';
  'DataRegistry.addProof': 'ProofAdded';
  'DataRegistry.addRefinementWithPermission': 'RefinementAdded' | 'PermissionGranted';
  'DataRegistry.addRefinerWithSchemaId': never;
  'DataRegistry.addSchema': never;
  'DataRegistry.deleteFile': 'FileDeleted';
  'DataRegistry.grantRole': 'RoleGranted';
  'DataRegistry.initialize': 'Initialized';
  'DataRegistry.pause': 'Paused';
  'DataRegistry.renounceRole': 'RoleRevoked';
  'DataRegistry.revokeRole': 'RoleRevoked';
  'DataRegistry.unpause': 'Unpaused';
  'DataRegistry.updateFileMetadata': 'FileMetadataUpdated';
  'DataRegistry.updateSchemaId': never;
  'DataRegistry.upgradeToAndCall': 'Upgraded';
  'QueryEngine.cacheResult': never;
  'QueryEngine.claimDlpPayment': 'DlpPaymentClaimed' | 'Transfer';
  'QueryEngine.executeQuery': never;
  'QueryEngine.grantRole': 'RoleGranted';
  'QueryEngine.initialize': 'Initialized';
  'QueryEngine.invalidateCache': never;
  'QueryEngine.pause': 'Paused';
  'QueryEngine.renounceRole': 'RoleRevoked';
  'QueryEngine.revokeRole': 'RoleRevoked';
  'QueryEngine.unpause': 'Unpaused';
  'QueryEngine.updatePermissionApproval': 'PermissionApprovalUpdated';
  'QueryEngine.updateQueryLimit': never;
  'QueryEngine.upgradeToAndCall': 'Upgraded';
  'SwapHelper.getQuote': never;
  'SwapHelper.grantRole': 'RoleGranted';
  'SwapHelper.initialize': 'Initialized';
  'SwapHelper.pause': 'Paused';
  'SwapHelper.renounceRole': 'RoleRevoked';
  'SwapHelper.revokeRole': 'RoleRevoked';
  'SwapHelper.swap': never;
  'SwapHelper.unpause': 'Unpaused';
  'SwapHelper.updateRouter': never;
  'SwapHelper.updateSlippage': never;
  'SwapHelper.upgradeToAndCall': 'Upgraded';
  'TeePool.addJob': never;
  'TeePool.cancelJob': never;
  'TeePool.claimReward': never;
  'TeePool.submitProof': never;
  'TeePool.updateFeeRecipient': never;
  'TeePool.updateJobTimeout': never;
  'TeePool.updateMinJobDuration': never;
  'TeePoolDedicatedGpu.addProof': 'ProofAdded';
  'TeePoolDedicatedGpu.addTee': 'TeeAdded';
  'TeePoolDedicatedGpu.cancelJob': 'JobCanceled';
  'TeePoolDedicatedGpu.claim': 'Claimed';
  'TeePoolDedicatedGpu.grantRole': 'RoleGranted';
  'TeePoolDedicatedGpu.initialize': 'Initialized';
  'TeePoolDedicatedGpu.pause': 'Paused';
  'TeePoolDedicatedGpu.removeJob': 'JobRemoved';
  'TeePoolDedicatedGpu.removeTee': 'TeeRemoved';
  'TeePoolDedicatedGpu.renounceRole': 'RoleRevoked';
  'TeePoolDedicatedGpu.revokeRole': 'RoleRevoked';
  'TeePoolDedicatedGpu.submitJob': 'JobSubmitted';
  'TeePoolDedicatedGpu.unpause': 'Unpaused';
  'TeePoolDedicatedGpu.upgradeToAndCall': 'Upgraded';
  'TeePoolDedicatedStandard.addProof': 'ProofAdded';
  'TeePoolDedicatedStandard.addTee': 'TeeAdded';
  'TeePoolDedicatedStandard.cancelJob': 'JobCanceled';
  'TeePoolDedicatedStandard.claim': 'Claimed';
  'TeePoolDedicatedStandard.grantRole': 'RoleGranted';
  'TeePoolDedicatedStandard.initialize': 'Initialized';
  'TeePoolDedicatedStandard.pause': 'Paused';
  'TeePoolDedicatedStandard.removeJob': 'JobRemoved';
  'TeePoolDedicatedStandard.removeTee': 'TeeRemoved';
  'TeePoolDedicatedStandard.renounceRole': 'RoleRevoked';
  'TeePoolDedicatedStandard.revokeRole': 'RoleRevoked';
  'TeePoolDedicatedStandard.submitJob': 'JobSubmitted';
  'TeePoolDedicatedStandard.unpause': 'Unpaused';
  'TeePoolDedicatedStandard.upgradeToAndCall': 'Upgraded';
  'TeePoolEphemeralStandard.addProof': 'ProofAdded';
  'TeePoolEphemeralStandard.addTee': 'TeeAdded';
  'TeePoolEphemeralStandard.cancelJob': 'JobCanceled';
  'TeePoolEphemeralStandard.claim': 'Claimed';
  'TeePoolEphemeralStandard.grantRole': 'RoleGranted';
  'TeePoolEphemeralStandard.initialize': 'Initialized';
  'TeePoolEphemeralStandard.pause': 'Paused';
  'TeePoolEphemeralStandard.removeJob': 'JobRemoved';
  'TeePoolEphemeralStandard.removeTee': 'TeeRemoved';
  'TeePoolEphemeralStandard.renounceRole': 'RoleRevoked';
  'TeePoolEphemeralStandard.revokeRole': 'RoleRevoked';
  'TeePoolEphemeralStandard.submitJob': 'JobSubmitted';
  'TeePoolEphemeralStandard.unpause': 'Unpaused';
  'TeePoolEphemeralStandard.upgradeToAndCall': 'Upgraded';
  'TeePoolPersistentGpu.addProof': 'ProofAdded';
  'TeePoolPersistentGpu.addTee': 'TeeAdded';
  'TeePoolPersistentGpu.cancelJob': 'JobCanceled';
  'TeePoolPersistentGpu.claim': 'Claimed';
  'TeePoolPersistentGpu.grantRole': 'RoleGranted';
  'TeePoolPersistentGpu.initialize': 'Initialized';
  'TeePoolPersistentGpu.pause': 'Paused';
  'TeePoolPersistentGpu.removeJob': 'JobRemoved';
  'TeePoolPersistentGpu.removeTee': 'TeeRemoved';
  'TeePoolPersistentGpu.renounceRole': 'RoleRevoked';
  'TeePoolPersistentGpu.revokeRole': 'RoleRevoked';
  'TeePoolPersistentGpu.submitJob': 'JobSubmitted';
  'TeePoolPersistentGpu.unpause': 'Unpaused';
  'TeePoolPersistentGpu.upgradeToAndCall': 'Upgraded';
  'TeePoolPersistentStandard.addProof': 'ProofAdded';
  'TeePoolPersistentStandard.addTee': 'TeeAdded';
  'TeePoolPersistentStandard.cancelJob': 'JobCanceled';
  'TeePoolPersistentStandard.claim': 'Claimed';
  'TeePoolPersistentStandard.grantRole': 'RoleGranted';
  'TeePoolPersistentStandard.initialize': 'Initialized';
  'TeePoolPersistentStandard.pause': 'Paused';
  'TeePoolPersistentStandard.removeJob': 'JobRemoved';
  'TeePoolPersistentStandard.removeTee': 'TeeRemoved';
  'TeePoolPersistentStandard.renounceRole': 'RoleRevoked';
  'TeePoolPersistentStandard.revokeRole': 'RoleRevoked';
  'TeePoolPersistentStandard.submitJob': 'JobSubmitted';
  'TeePoolPersistentStandard.unpause': 'Unpaused';
  'TeePoolPersistentStandard.upgradeToAndCall': 'Upgraded';
  'TeePoolPhala.addProof': 'ProofAdded';
  'TeePoolPhala.addTee': 'TeeAdded';
  'TeePoolPhala.cancelJob': 'JobCanceled';
  'TeePoolPhala.claim': 'Claimed';
  'TeePoolPhala.grantRole': 'RoleGranted';
  'TeePoolPhala.initialize': 'Initialized';
  'TeePoolPhala.pause': 'Paused';
  'TeePoolPhala.removeTee': 'TeeRemoved';
  'TeePoolPhala.renounceRole': 'RoleRevoked';
  'TeePoolPhala.requestContributionProof': 'JobSubmitted';
  'TeePoolPhala.revokeRole': 'RoleRevoked';
  'TeePoolPhala.submitJob': 'JobSubmitted';
  'TeePoolPhala.unpause': 'Unpaused';
  'TeePoolPhala.upgradeToAndCall': 'Upgraded';
  'VanaEpoch.forceFinalizedEpoch': 'EpochFinalized';
  'VanaEpoch.grantRole': 'RoleGranted';
  'VanaEpoch.initialize': 'Initialized';
  'VanaEpoch.overrideEpochDlpReward': 'EpochDlpRewardOverridden';
  'VanaEpoch.pause': 'Paused';
  'VanaEpoch.renounceRole': 'RoleRevoked';
  'VanaEpoch.revokeRole': 'RoleRevoked';
  'VanaEpoch.saveEpochDlpRewards': 'EpochDlpRewardAdded' | 'EpochFinalized';
  'VanaEpoch.unpause': 'Unpaused';
  'VanaEpoch.updateDaySize': 'EpochDayUpdated';
  'VanaEpoch.updateEpoch': 'EpochCreated' | 'EpochUpdated';
  'VanaEpoch.updateEpochRewardAmount': 'EpochRewardAmountUpdated';
  'VanaEpoch.updateEpochSize': 'EpochSizeUpdated';
  'VanaEpoch.upgradeToAndCall': 'Upgraded';
  'VanaPoolEntity.addRewards': 'RewardsAdded';
  'VanaPoolEntity.createEntity': 'EntityCreated' | 'EntityStatusUpdated';
  'VanaPoolEntity.grantRole': 'RoleGranted';
  'VanaPoolEntity.initialize': 'Initialized';
  'VanaPoolEntity.pause': 'Paused';
  'VanaPoolEntity.processRewards': 'RewardsProcessed';
  'VanaPoolEntity.registerEntity': 'EntityRegistered';
  'VanaPoolEntity.renounceRole': 'RoleRevoked';
  'VanaPoolEntity.revokeRole': 'RoleRevoked';
  'VanaPoolEntity.unpause': 'Unpaused';
  'VanaPoolEntity.unregisterEntity': 'EntityUnregistered';
  'VanaPoolEntity.updateEntity': 'EntityUpdated';
  'VanaPoolEntity.updateEntityMaxAPY': 'EntityMaxAPYUpdated' | 'RewardsProcessed';
  'VanaPoolEntity.updateEntityMetadata': 'EntityMetadataUpdated';
  'VanaPoolEntity.upgradeToAndCall': 'Upgraded';
  'VanaPoolStaking.claimRewards': never;
  'VanaPoolStaking.grantRole': 'RoleGranted';
  'VanaPoolStaking.initialize': 'Initialized';
  'VanaPoolStaking.pause': 'Paused';
  'VanaPoolStaking.registerEntityStake': 'Staked';
  'VanaPoolStaking.renounceRole': 'RoleRevoked';
  'VanaPoolStaking.revokeRole': 'RoleRevoked';
  'VanaPoolStaking.stake': 'Staked';
  'VanaPoolStaking.unpause': 'Unpaused';
  'VanaPoolStaking.unstake': 'Unstaked';
  'VanaPoolStaking.updateMinStakeAmount': 'MinStakeUpdated';
  'VanaPoolStaking.upgradeToAndCall': 'Upgraded';
  'VanaPoolTreasury.allocateFunds': never;
  'VanaPoolTreasury.deposit': never;
  'VanaPoolTreasury.grantRole': 'RoleGranted';
  'VanaPoolTreasury.initialize': 'Initialized';
  'VanaPoolTreasury.pause': 'Paused';
  'VanaPoolTreasury.renounceRole': 'RoleRevoked';
  'VanaPoolTreasury.revokeRole': 'RoleRevoked';
  'VanaPoolTreasury.unpause': 'Unpaused';
  'VanaPoolTreasury.updateBudget': never;
  'VanaPoolTreasury.updateTreasuryAddress': never;
  'VanaPoolTreasury.upgradeToAndCall': 'Upgraded';
  'VanaPoolTreasury.withdraw': never;
};

// Event argument types
export interface EventArgs {
  AddressBlocked: {
    arg0: `0x${string}`;
  };
  AddressUnblocked: {
    arg0: `0x${string}`;
  };
  Approval: {
    owner: `0x${string}`;
    spender: `0x${string}`;
    value: bigint;
  };
  Claimed: {
    teeAddress: `0x${string}`;
    amount: bigint;
  };
  ComputeInstructionAdded: {
    computeInstructionId: bigint;
    owner: `0x${string}`;
    computeInstructionUrl: string;
    computeInstructionHash: `0x${string}`;
  };
  ComputeInstructionUpdated: {
    computeInstructionId: bigint;
    dlpId: bigint;
    approved: boolean;
  };
  DATCreated: {
    token: `0x${string}`;
    salt: `0x${string}`;
    name: string;
    symbol: string;
    owner: `0x${string}`;
    cap: bigint;
  };
  DelegateChanged: {
    delegator: `0x${string}`;
    fromDelegate: `0x${string}`;
    toDelegate: `0x${string}`;
  };
  DelegateVotesChanged: {
    delegate: `0x${string}`;
    previousVotes: bigint;
    newVotes: bigint;
  };
  Deposit: {
    account: `0x${string}`;
    token: `0x${string}`;
    amount: bigint;
  };
  DlpLpTokenIdUpdated: {
    dlpId: bigint;
    lpTokenId: bigint;
  };
  DlpPaymentClaimed: {
    dlpId: bigint;
    dlpTreasuryAddress: `0x${string}`;
    token: `0x${string}`;
    amount: bigint;
  };
  DlpRegistered: {
    dlpId: bigint;
    dlpAddress: `0x${string}`;
    ownerAddress: `0x${string}`;
    treasuryAddress: `0x${string}`;
    name: string;
    iconUrl: string;
    website: string;
    metadata: string;
  };
  DlpRegistrationDepositAmountUpdated: {
    newDlpRegistrationDepositAmount: bigint;
  };
  DlpStatusUpdated: {
    dlpId: bigint;
    newStatus: bigint;
  };
  DlpTokenUpdated: {
    dlpId: bigint;
    tokenAddress: `0x${string}`;
  };
  DlpUpdated: {
    dlpId: bigint;
    dlpAddress: `0x${string}`;
    ownerAddress: `0x${string}`;
    treasuryAddress: `0x${string}`;
    name: string;
    iconUrl: string;
    website: string;
    metadata: string;
  };
  DlpVerificationBlockUpdated: {
    dlpId: bigint;
    verificationBlockNumber: bigint;
  };
  DlpVerificationUpdated: {
    dlpId: bigint;
    verified: boolean;
  };
  EIP712DomainChanged: {};
  EntityCreated: {
    entityId: bigint;
    ownerAddress: `0x${string}`;
    name: string;
    maxAPY: bigint;
  };
  EntityMaxAPYUpdated: {
    entityId: bigint;
    newMaxAPY: bigint;
  };
  EntityStakeRegistered: {
    entityId: bigint;
    ownerAddress: `0x${string}`;
  };
  EntityStatusUpdated: {
    entityId: bigint;
    newStatus: bigint;
  };
  EntityUpdated: {
    entityId: bigint;
    ownerAddress: `0x${string}`;
    name: string;
  };
  EpochCreated: {
    epochId: bigint;
    startBlock: bigint;
    endBlock: bigint;
    rewardAmount: bigint;
  };
  EpochDayUpdated: {
    newDaySize: bigint;
  };
  EpochDlpPenaltyDistributed: {
    epochId: bigint;
    dlpId: bigint;
    distributedAmount: bigint;
    totalPenaltyAmount: bigint;
  };
  EpochDlpPenaltyUpdated: {
    epochId: bigint;
    dlpId: bigint;
    tradingVolumeScorePenalty: bigint;
    uniqueContributorsScorePenalty: bigint;
    dataAccessFeesScorePenalty: bigint;
  };
  EpochDlpPerformancesOverridden: {
    epochId: bigint;
    dlpId: bigint;
    tradingVolume: bigint;
    uniqueContributors: bigint;
    dataAccessFees: bigint;
    tradingVolumeScore: bigint;
    uniqueContributorsScore: bigint;
    dataAccessFeesScore: bigint;
  };
  EpochDlpPerformancesSaved: {
    epochId: bigint;
    dlpId: bigint;
    tradingVolume: bigint;
    uniqueContributors: bigint;
    dataAccessFees: bigint;
    tradingVolumeScore: bigint;
    uniqueContributorsScore: bigint;
    dataAccessFeesScore: bigint;
  };
  EpochDlpRewardAdded: {
    epochId: bigint;
    dlpId: bigint;
    rewardAmount: bigint;
    penaltyAmount: bigint;
  };
  EpochDlpRewardDistributed: {
    epochId: bigint;
    dlpId: bigint;
    trancheId: bigint;
    trancheAmount: bigint;
    tokenRewardAmount: bigint;
    spareToken: bigint;
    spareVana: bigint;
    usedVanaAmount: bigint;
  };
  EpochDlpRewardOverridden: {
    epochId: bigint;
    dlpId: bigint;
    rewardAmount: bigint;
    penaltyAmount: bigint;
  };
  EpochFinalized: {
    epochId: bigint;
  };
  EpochRewardAmountUpdated: {
    newEpochRewardAmount: bigint;
  };
  EpochSizeUpdated: {
    newEpochSize: bigint;
  };
  EpochUpdated: {
    epochId: bigint;
    startBlock: bigint;
    endBlock: bigint;
    rewardAmount: bigint;
  };
  FileAdded: {
    fileId: bigint;
    ownerAddress: `0x${string}`;
    url: string;
  };
  FileAddedV2: {
    fileId: bigint;
    ownerAddress: `0x${string}`;
    url: string;
    schemaId: bigint;
  };
  GranteeRegistered: {
    granteeId: bigint;
    owner: `0x${string}`;
    granteeAddress: `0x${string}`;
    publicKey: string;
  };
  HardwareTypeUpdated: {
    newHardwareType: bigint;
  };
  Initialized: {
    version: bigint;
  };
  JobCanceled: {
    jobId: bigint;
  };
  JobRegistered: {
    jobId: bigint;
    ownerAddress: `0x${string}`;
  };
  JobRemoved: {
    jobId: bigint;
  };
  JobStatusUpdated: {
    jobId: bigint;
    status: bigint;
    statusMessage: string;
  };
  JobSubmitted: {
    jobId: bigint;
    fileId: bigint;
    teeAddress: `0x${string}`;
    bidAmount: bigint;
  };
  MetricWeightsUpdated: {
    tradingVolume: bigint;
    uniqueContributors: bigint;
    dataAccessFees: bigint;
  };
  MinStakeUpdated: {
    newMinStake: bigint;
  };
  Paused: {
    account: `0x${string}`;
  };
  PaymentExecuted: {
    jobId: bigint;
    token: `0x${string}`;
    amount: bigint;
  };
  PaymentReceived: {
    token: `0x${string}`;
    amount: bigint;
    jobId: bigint;
    refinerId: bigint;
  };
  PermissionAdded: {
    permissionId: bigint;
    user: `0x${string}`;
    granteeId: bigint;
    grant: string;
    fileIds: readonly bigint[];
  };
  PermissionApprovalUpdated: {
    permissionId: bigint;
    approved: boolean;
  };
  PermissionGranted: {
    fileId: bigint;
    account: `0x${string}`;
  };
  PermissionRevoked: {
    permissionId: bigint;
  };
  ProofAdded: {
    fileId: bigint;
    ownerAddress: `0x${string}`;
    proofIndex: bigint;
    dlpId: bigint;
    score: bigint;
    proofUrl: string;
  };
  RefinementAdded: {
    fileId: bigint;
    refinerId: bigint;
    url: string;
  };
  RefinementUpdated: {
    fileId: bigint;
    refinerId: bigint;
    url: string;
  };
  RefinerAdded: {
    refinerId: bigint;
    dlpId: bigint;
    name: string;
    schemaId: bigint;
    schemaDefinitionUrl: string;
    refinementInstructionUrl: string;
  };
  Reward: {
    sender: `0x${string}`;
    recipient: `0x${string}`;
    token: `0x${string}`;
    usedVanaForReward: bigint;
    tokenRewardAmount: bigint;
    usedVanaForLp: bigint;
    liquidityDelta: bigint;
    spareVana: bigint;
    spareToken: bigint;
  };
  RewardsAdded: {
    entityId: bigint;
    amount: bigint;
  };
  RewardsProcessed: {
    entityId: bigint;
    distributedAmount: bigint;
  };
  RoleAdminChanged: {
    role: `0x${string}`;
    previousAdminRole: `0x${string}`;
    newAdminRole: `0x${string}`;
  };
  RoleGranted: {
    role: `0x${string}`;
    account: `0x${string}`;
    sender: `0x${string}`;
  };
  RoleRevoked: {
    role: `0x${string}`;
    account: `0x${string}`;
    sender: `0x${string}`;
  };
  SchemaAdded: {
    schemaId: bigint;
    name: string;
    dialect: string;
    definitionUrl: string;
  };
  ServerRegistered: {
    serverId: bigint;
    owner: `0x${string}`;
    serverAddress: `0x${string}`;
    publicKey: string;
    url: string;
  };
  ServerTrusted: {
    user: `0x${string}`;
    serverId: bigint;
  };
  ServerUntrusted: {
    user: `0x${string}`;
    serverId: bigint;
  };
  ServerUpdated: {
    serverId: bigint;
    url: string;
  };
  Staked: {
    entityId: bigint;
    staker: `0x${string}`;
    amount: bigint;
    sharesIssued: bigint;
  };
  Swap: {
    sender: `0x${string}`;
    recipient: `0x${string}`;
    tokenIn: `0x${string}`;
    amountIn: bigint;
    tokenOut: `0x${string}`;
    amountOut: bigint;
  };
  TeeAdded: {
    teeAddress: `0x${string}`;
  };
  TeeAssignmentFailed: {
    jobId: bigint;
    reason: `0x${string}`;
  };
  TeeAssignmentSucceeded: {
    jobId: bigint;
    teePoolAddress: `0x${string}`;
    teeAddress: `0x${string}`;
  };
  TeePoolTypeUpdated: {
    newTeePoolType: bigint;
  };
  TeeRemoved: {
    teeAddress: `0x${string}`;
  };
  Transfer: {
    to: `0x${string}`;
    token: `0x${string}`;
    amount: bigint;
  };
  Unpaused: {
    account: `0x${string}`;
  };
  Unstaked: {
    entityId: bigint;
    staker: `0x${string}`;
    amount: bigint;
    sharesBurned: bigint;
  };
  Upgraded: {
    implementation: `0x${string}`;
  };
  VestingWalletCreated: {
    wallet: `0x${string}`;
    beneficiary: `0x${string}`;
    start: bigint;
    cliff: bigint;
    duration: bigint;
    amount: bigint;
  };
  Withdraw: {
    account: `0x${string}`;
    token: `0x${string}`;
    amount: bigint;
  };
}

// Safe map lookup (no error if key not present)
type Lookup<M, K extends PropertyKey> = K extends keyof M ? M[K] : never;

// Get expected event names for a contract function
export type ExpectedEventNames<C extends Contract, F extends Fn<C>> = Lookup<
  EventNameMap,
  Extract<Join<C & string, F & string>, keyof EventNameMap>
>;

// Get expected events object with proper types
export type ExpectedEvents<C extends Contract, F extends Fn<C>> = [
  ExpectedEventNames<C, F>,
] extends [never]
  ? {}
  : {
      [K in ExpectedEventNames<C, F>]?: K extends keyof EventArgs
        ? EventArgs[K]
        : Record<string, unknown>;
    };

// Transaction result with typed events
export type TypedTransactionResult<C extends Contract, F extends Fn<C>> = {
  hash: `0x${string}`;
  from?: `0x${string}`;
  contract: C;
  fn: F;
  expectedEvents: ExpectedEvents<C, F>;
  allEvents: Array<{
    contractAddress: string;
    eventName: string;
    args: Record<string, unknown>;
    logIndex: number;
  }>;
  hasExpectedEvents: boolean;
};
