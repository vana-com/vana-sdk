/**
 * Runtime event registry for decoding
 *
 * @generated 2025-08-23T22:39:19.147Z
 *
 * DO NOT EDIT - This file is generated by scripts/generate-types.ts
 */

import type { AbiEvent } from 'viem';

// Function-specific expected events registry
export const EVENT_REGISTRY: Record<
  string,
  {
    contract: string;
    fn: string;
    eventNames: readonly string[];
  }
> = {
  'ComputeEngine.cancelJob': {
    contract: 'ComputeEngine',
    fn: 'cancelJob',
    eventNames: ['JobCanceled'] as const,
  },
  'ComputeEngine.deposit': {
    contract: 'ComputeEngine',
    fn: 'deposit',
    eventNames: ['Deposit'] as const,
  },
  'ComputeEngine.executePayment': {
    contract: 'ComputeEngine',
    fn: 'executePayment',
    eventNames: ['PaymentExecuted'] as const,
  },
  'ComputeEngine.grantRole': {
    contract: 'ComputeEngine',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'ComputeEngine.initialize': {
    contract: 'ComputeEngine',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'ComputeEngine.pause': {
    contract: 'ComputeEngine',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'ComputeEngine.registerJob': {
    contract: 'ComputeEngine',
    fn: 'registerJob',
    eventNames: ['JobRegistered'] as const,
  },
  'ComputeEngine.renounceRole': {
    contract: 'ComputeEngine',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'ComputeEngine.revokeRole': {
    contract: 'ComputeEngine',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'ComputeEngine.submitJob': {
    contract: 'ComputeEngine',
    fn: 'submitJob',
    eventNames: ['JobSubmitted'] as const,
  },
  'ComputeEngine.unpause': {
    contract: 'ComputeEngine',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'ComputeEngine.updateJobStatus': {
    contract: 'ComputeEngine',
    fn: 'updateJobStatus',
    eventNames: ['JobStatusUpdated'] as const,
  },
  'ComputeEngine.upgradeToAndCall': {
    contract: 'ComputeEngine',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'ComputeEngine.withdraw': {
    contract: 'ComputeEngine',
    fn: 'withdraw',
    eventNames: ['Transfer', 'Withdraw'] as const,
  },
  'ComputeInstructionRegistry.addComputeInstruction': {
    contract: 'ComputeInstructionRegistry',
    fn: 'addComputeInstruction',
    eventNames: ['ComputeInstructionAdded'] as const,
  },
  'ComputeInstructionRegistry.grantRole': {
    contract: 'ComputeInstructionRegistry',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'ComputeInstructionRegistry.initialize': {
    contract: 'ComputeInstructionRegistry',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'ComputeInstructionRegistry.pause': {
    contract: 'ComputeInstructionRegistry',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'ComputeInstructionRegistry.removeComputeInstruction': {
    contract: 'ComputeInstructionRegistry',
    fn: 'removeComputeInstruction',
    eventNames: ['ComputeInstructionRemoved'] as const,
  },
  'ComputeInstructionRegistry.renounceRole': {
    contract: 'ComputeInstructionRegistry',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'ComputeInstructionRegistry.revokeRole': {
    contract: 'ComputeInstructionRegistry',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'ComputeInstructionRegistry.unpause': {
    contract: 'ComputeInstructionRegistry',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'ComputeInstructionRegistry.updateComputeInstruction': {
    contract: 'ComputeInstructionRegistry',
    fn: 'updateComputeInstruction',
    eventNames: ['ComputeInstructionUpdated'] as const,
  },
  'ComputeInstructionRegistry.upgradeToAndCall': {
    contract: 'ComputeInstructionRegistry',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DAT.approve': {
    contract: 'DAT',
    fn: 'approve',
    eventNames: ['Approval'] as const,
  },
  'DAT.blockAddress': {
    contract: 'DAT',
    fn: 'blockAddress',
    eventNames: ['AddressBlocked'] as const,
  },
  'DAT.burn': {
    contract: 'DAT',
    fn: 'burn',
    eventNames: [] as const,
  },
  'DAT.mint': {
    contract: 'DAT',
    fn: 'mint',
    eventNames: [] as const,
  },
  'DAT.pause': {
    contract: 'DAT',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DAT.transfer': {
    contract: 'DAT',
    fn: 'transfer',
    eventNames: ['Transfer'] as const,
  },
  'DAT.transferFrom': {
    contract: 'DAT',
    fn: 'transferFrom',
    eventNames: ['Transfer'] as const,
  },
  'DAT.unblockAddress': {
    contract: 'DAT',
    fn: 'unblockAddress',
    eventNames: ['AddressUnblocked'] as const,
  },
  'DAT.unpause': {
    contract: 'DAT',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DAT.upgradeToAndCall': {
    contract: 'DAT',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DATFactory.createDAT': {
    contract: 'DATFactory',
    fn: 'createDAT',
    eventNames: ['DATCreated'] as const,
  },
  'DATFactory.createToken': {
    contract: 'DATFactory',
    fn: 'createToken',
    eventNames: ['DATCreated'] as const,
  },
  'DATFactory.grantRole': {
    contract: 'DATFactory',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DATFactory.initialize': {
    contract: 'DATFactory',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DATFactory.pause': {
    contract: 'DATFactory',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DATFactory.renounceRole': {
    contract: 'DATFactory',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DATFactory.revokeRole': {
    contract: 'DATFactory',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DATFactory.unpause': {
    contract: 'DATFactory',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DATFactory.updateDATTemplate': {
    contract: 'DATFactory',
    fn: 'updateDATTemplate',
    eventNames: [] as const,
  },
  'DATFactory.updateFactoryFee': {
    contract: 'DATFactory',
    fn: 'updateFactoryFee',
    eventNames: [] as const,
  },
  'DATFactory.upgradeToAndCall': {
    contract: 'DATFactory',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DATPausable.approve': {
    contract: 'DATPausable',
    fn: 'approve',
    eventNames: ['Approval'] as const,
  },
  'DATPausable.blockAddress': {
    contract: 'DATPausable',
    fn: 'blockAddress',
    eventNames: ['AddressBlocked'] as const,
  },
  'DATPausable.burn': {
    contract: 'DATPausable',
    fn: 'burn',
    eventNames: [] as const,
  },
  'DATPausable.mint': {
    contract: 'DATPausable',
    fn: 'mint',
    eventNames: [] as const,
  },
  'DATPausable.pause': {
    contract: 'DATPausable',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DATPausable.transfer': {
    contract: 'DATPausable',
    fn: 'transfer',
    eventNames: ['Transfer'] as const,
  },
  'DATPausable.transferFrom': {
    contract: 'DATPausable',
    fn: 'transferFrom',
    eventNames: ['Transfer'] as const,
  },
  'DATPausable.unblockAddress': {
    contract: 'DATPausable',
    fn: 'unblockAddress',
    eventNames: ['AddressUnblocked'] as const,
  },
  'DATPausable.unpause': {
    contract: 'DATPausable',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DATPausable.upgradeToAndCall': {
    contract: 'DATPausable',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DATVotes.approve': {
    contract: 'DATVotes',
    fn: 'approve',
    eventNames: ['Approval'] as const,
  },
  'DATVotes.blockAddress': {
    contract: 'DATVotes',
    fn: 'blockAddress',
    eventNames: ['AddressBlocked'] as const,
  },
  'DATVotes.burn': {
    contract: 'DATVotes',
    fn: 'burn',
    eventNames: [] as const,
  },
  'DATVotes.delegate': {
    contract: 'DATVotes',
    fn: 'delegate',
    eventNames: ['DelegateChanged', 'DelegateVotesChanged'] as const,
  },
  'DATVotes.delegateBySig': {
    contract: 'DATVotes',
    fn: 'delegateBySig',
    eventNames: ['DelegateChanged', 'DelegateVotesChanged'] as const,
  },
  'DATVotes.mint': {
    contract: 'DATVotes',
    fn: 'mint',
    eventNames: [] as const,
  },
  'DATVotes.pause': {
    contract: 'DATVotes',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DATVotes.transfer': {
    contract: 'DATVotes',
    fn: 'transfer',
    eventNames: ['Transfer'] as const,
  },
  'DATVotes.transferFrom': {
    contract: 'DATVotes',
    fn: 'transferFrom',
    eventNames: ['Transfer'] as const,
  },
  'DATVotes.unblockAddress': {
    contract: 'DATVotes',
    fn: 'unblockAddress',
    eventNames: ['AddressUnblocked'] as const,
  },
  'DATVotes.unpause': {
    contract: 'DATVotes',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DATVotes.upgradeToAndCall': {
    contract: 'DATVotes',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DLPPerformance.grantRole': {
    contract: 'DLPPerformance',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DLPPerformance.initialize': {
    contract: 'DLPPerformance',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DLPPerformance.overrideEpochDlpPenalty': {
    contract: 'DLPPerformance',
    fn: 'overrideEpochDlpPenalty',
    eventNames: ['EpochDlpPenaltyUpdated'] as const,
  },
  'DLPPerformance.overrideEpochPerformances': {
    contract: 'DLPPerformance',
    fn: 'overrideEpochPerformances',
    eventNames: ['EpochDlpPerformancesOverridden'] as const,
  },
  'DLPPerformance.pause': {
    contract: 'DLPPerformance',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DLPPerformance.renounceRole': {
    contract: 'DLPPerformance',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPPerformance.revokeRole': {
    contract: 'DLPPerformance',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPPerformance.saveEpochPerformances': {
    contract: 'DLPPerformance',
    fn: 'saveEpochPerformances',
    eventNames: ['EpochDlpPerformancesSaved'] as const,
  },
  'DLPPerformance.unpause': {
    contract: 'DLPPerformance',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DLPPerformance.updateMetricWeights': {
    contract: 'DLPPerformance',
    fn: 'updateMetricWeights',
    eventNames: ['MetricWeightsUpdated'] as const,
  },
  'DLPPerformance.upgradeToAndCall': {
    contract: 'DLPPerformance',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DLPRegistry.deregisterDlp': {
    contract: 'DLPRegistry',
    fn: 'deregisterDlp',
    eventNames: ['DlpStatusUpdated'] as const,
  },
  'DLPRegistry.dlpConsumerVotesSubmitted': {
    contract: 'DLPRegistry',
    fn: 'dlpConsumerVotesSubmitted',
    eventNames: ['DlpConsumerVotesSubmitted'] as const,
  },
  'DLPRegistry.dlpOwnerVotesSubmitted': {
    contract: 'DLPRegistry',
    fn: 'dlpOwnerVotesSubmitted',
    eventNames: ['DlpOwnerVotesSubmitted'] as const,
  },
  'DLPRegistry.dlpUnregistrationRequested': {
    contract: 'DLPRegistry',
    fn: 'dlpUnregistrationRequested',
    eventNames: ['DlpUnregistrationRequested'] as const,
  },
  'DLPRegistry.grantRole': {
    contract: 'DLPRegistry',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DLPRegistry.initialize': {
    contract: 'DLPRegistry',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DLPRegistry.migrateDlpData': {
    contract: 'DLPRegistry',
    fn: 'migrateDlpData',
    eventNames: ['DlpRegistered'] as const,
  },
  'DLPRegistry.pause': {
    contract: 'DLPRegistry',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DLPRegistry.registerDlp': {
    contract: 'DLPRegistry',
    fn: 'registerDlp',
    eventNames: ['DlpRegistered'] as const,
  },
  'DLPRegistry.renounceRole': {
    contract: 'DLPRegistry',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRegistry.revokeRole': {
    contract: 'DLPRegistry',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRegistry.unpause': {
    contract: 'DLPRegistry',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DLPRegistry.unregisterDlp': {
    contract: 'DLPRegistry',
    fn: 'unregisterDlp',
    eventNames: ['DlpUnregistered'] as const,
  },
  'DLPRegistry.unverifyDlp': {
    contract: 'DLPRegistry',
    fn: 'unverifyDlp',
    eventNames: ['DlpVerificationBlockUpdated'] as const,
  },
  'DLPRegistry.updateDlp': {
    contract: 'DLPRegistry',
    fn: 'updateDlp',
    eventNames: ['DlpUpdated'] as const,
  },
  'DLPRegistry.updateDlpOwner': {
    contract: 'DLPRegistry',
    fn: 'updateDlpOwner',
    eventNames: ['DlpOwnerUpdated'] as const,
  },
  'DLPRegistry.updateDlpRegistrationDepositAmount': {
    contract: 'DLPRegistry',
    fn: 'updateDlpRegistrationDepositAmount',
    eventNames: ['DlpRegistrationDepositAmountUpdated'] as const,
  },
  'DLPRegistry.updateDlpToken': {
    contract: 'DLPRegistry',
    fn: 'updateDlpToken',
    eventNames: ['DlpTokenUpdated'] as const,
  },
  'DLPRegistry.updateDlpTokenAndVerification': {
    contract: 'DLPRegistry',
    fn: 'updateDlpTokenAndVerification',
    eventNames: ['DlpTokenUpdated', 'DlpVerificationBlockUpdated'] as const,
  },
  'DLPRegistry.updateDlpVerificationBlock': {
    contract: 'DLPRegistry',
    fn: 'updateDlpVerificationBlock',
    eventNames: ['DlpVerificationBlockUpdated'] as const,
  },
  'DLPRegistry.upgradeToAndCall': {
    contract: 'DLPRegistry',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DLPRegistryTreasury.allocateFunds': {
    contract: 'DLPRegistryTreasury',
    fn: 'allocateFunds',
    eventNames: [] as const,
  },
  'DLPRegistryTreasury.deposit': {
    contract: 'DLPRegistryTreasury',
    fn: 'deposit',
    eventNames: [] as const,
  },
  'DLPRegistryTreasury.grantRole': {
    contract: 'DLPRegistryTreasury',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DLPRegistryTreasury.initialize': {
    contract: 'DLPRegistryTreasury',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DLPRegistryTreasury.pause': {
    contract: 'DLPRegistryTreasury',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DLPRegistryTreasury.renounceRole': {
    contract: 'DLPRegistryTreasury',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRegistryTreasury.revokeRole': {
    contract: 'DLPRegistryTreasury',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRegistryTreasury.transfer': {
    contract: 'DLPRegistryTreasury',
    fn: 'transfer',
    eventNames: ['Transfer'] as const,
  },
  'DLPRegistryTreasury.unpause': {
    contract: 'DLPRegistryTreasury',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DLPRegistryTreasury.updateBudget': {
    contract: 'DLPRegistryTreasury',
    fn: 'updateBudget',
    eventNames: [] as const,
  },
  'DLPRegistryTreasury.upgradeToAndCall': {
    contract: 'DLPRegistryTreasury',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DLPRegistryTreasury.withdraw': {
    contract: 'DLPRegistryTreasury',
    fn: 'withdraw',
    eventNames: [] as const,
  },
  'DLPRewardDeployer.distributeRewards': {
    contract: 'DLPRewardDeployer',
    fn: 'distributeRewards',
    eventNames: ['EpochDlpRewardDistributed'] as const,
  },
  'DLPRewardDeployer.grantRole': {
    contract: 'DLPRewardDeployer',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DLPRewardDeployer.initialize': {
    contract: 'DLPRewardDeployer',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DLPRewardDeployer.pause': {
    contract: 'DLPRewardDeployer',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DLPRewardDeployer.renounceRole': {
    contract: 'DLPRewardDeployer',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRewardDeployer.revokeRole': {
    contract: 'DLPRewardDeployer',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRewardDeployer.unpause': {
    contract: 'DLPRewardDeployer',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DLPRewardDeployer.upgradeToAndCall': {
    contract: 'DLPRewardDeployer',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DLPRewardDeployer.withdrawEpochDlpPenaltyAmount': {
    contract: 'DLPRewardDeployer',
    fn: 'withdrawEpochDlpPenaltyAmount',
    eventNames: ['EpochDlpPenaltyDistributed'] as const,
  },
  'DLPRewardDeployerTreasury.allocateRewards': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'allocateRewards',
    eventNames: [] as const,
  },
  'DLPRewardDeployerTreasury.deposit': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'deposit',
    eventNames: [] as const,
  },
  'DLPRewardDeployerTreasury.grantRole': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DLPRewardDeployerTreasury.initialize': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DLPRewardDeployerTreasury.pause': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DLPRewardDeployerTreasury.renounceRole': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRewardDeployerTreasury.revokeRole': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRewardDeployerTreasury.transfer': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'transfer',
    eventNames: ['Transfer'] as const,
  },
  'DLPRewardDeployerTreasury.unpause': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DLPRewardDeployerTreasury.updateAllocation': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'updateAllocation',
    eventNames: [] as const,
  },
  'DLPRewardDeployerTreasury.upgradeToAndCall': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DLPRewardDeployerTreasury.withdraw': {
    contract: 'DLPRewardDeployerTreasury',
    fn: 'withdraw',
    eventNames: [] as const,
  },
  'DLPRewardSwap.addLiquidity': {
    contract: 'DLPRewardSwap',
    fn: 'addLiquidity',
    eventNames: [] as const,
  },
  'DLPRewardSwap.grantRole': {
    contract: 'DLPRewardSwap',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DLPRewardSwap.initialize': {
    contract: 'DLPRewardSwap',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DLPRewardSwap.pause': {
    contract: 'DLPRewardSwap',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DLPRewardSwap.removeLiquidity': {
    contract: 'DLPRewardSwap',
    fn: 'removeLiquidity',
    eventNames: [] as const,
  },
  'DLPRewardSwap.renounceRole': {
    contract: 'DLPRewardSwap',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRewardSwap.revokeRole': {
    contract: 'DLPRewardSwap',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DLPRewardSwap.splitRewardSwap': {
    contract: 'DLPRewardSwap',
    fn: 'splitRewardSwap',
    eventNames: ['Reward'] as const,
  },
  'DLPRewardSwap.swap': {
    contract: 'DLPRewardSwap',
    fn: 'swap',
    eventNames: [] as const,
  },
  'DLPRewardSwap.unpause': {
    contract: 'DLPRewardSwap',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DLPRewardSwap.updateSwapFee': {
    contract: 'DLPRewardSwap',
    fn: 'updateSwapFee',
    eventNames: [] as const,
  },
  'DLPRewardSwap.upgradeToAndCall': {
    contract: 'DLPRewardSwap',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DataPortabilityGrantees.addPermissionToGrantee': {
    contract: 'DataPortabilityGrantees',
    fn: 'addPermissionToGrantee',
    eventNames: [] as const,
  },
  'DataPortabilityGrantees.grantRole': {
    contract: 'DataPortabilityGrantees',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DataPortabilityGrantees.initialize': {
    contract: 'DataPortabilityGrantees',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DataPortabilityGrantees.pause': {
    contract: 'DataPortabilityGrantees',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DataPortabilityGrantees.registerGrantee': {
    contract: 'DataPortabilityGrantees',
    fn: 'registerGrantee',
    eventNames: ['GranteeRegistered'] as const,
  },
  'DataPortabilityGrantees.removePermissionFromGrantee': {
    contract: 'DataPortabilityGrantees',
    fn: 'removePermissionFromGrantee',
    eventNames: [] as const,
  },
  'DataPortabilityGrantees.renounceRole': {
    contract: 'DataPortabilityGrantees',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataPortabilityGrantees.revokeRole': {
    contract: 'DataPortabilityGrantees',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataPortabilityGrantees.unpause': {
    contract: 'DataPortabilityGrantees',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DataPortabilityGrantees.upgradeToAndCall': {
    contract: 'DataPortabilityGrantees',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DataPortabilityPermissions.addPermission': {
    contract: 'DataPortabilityPermissions',
    fn: 'addPermission',
    eventNames: ['PermissionAdded'] as const,
  },
  'DataPortabilityPermissions.addServerFilesAndPermissions': {
    contract: 'DataPortabilityPermissions',
    fn: 'addServerFilesAndPermissions',
    eventNames: ['PermissionAdded'] as const,
  },
  'DataPortabilityPermissions.grantRole': {
    contract: 'DataPortabilityPermissions',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DataPortabilityPermissions.initialize': {
    contract: 'DataPortabilityPermissions',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DataPortabilityPermissions.pause': {
    contract: 'DataPortabilityPermissions',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DataPortabilityPermissions.renounceRole': {
    contract: 'DataPortabilityPermissions',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataPortabilityPermissions.revokePermission': {
    contract: 'DataPortabilityPermissions',
    fn: 'revokePermission',
    eventNames: ['PermissionRevoked'] as const,
  },
  'DataPortabilityPermissions.revokePermissionWithSignature': {
    contract: 'DataPortabilityPermissions',
    fn: 'revokePermissionWithSignature',
    eventNames: ['PermissionRevoked'] as const,
  },
  'DataPortabilityPermissions.revokeRole': {
    contract: 'DataPortabilityPermissions',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataPortabilityPermissions.unpause': {
    contract: 'DataPortabilityPermissions',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DataPortabilityPermissions.upgradeToAndCall': {
    contract: 'DataPortabilityPermissions',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DataPortabilityServers.addAndTrustServerByManager': {
    contract: 'DataPortabilityServers',
    fn: 'addAndTrustServerByManager',
    eventNames: ['ServerRegistered', 'ServerTrusted'] as const,
  },
  'DataPortabilityServers.addAndTrustServerWithSignature': {
    contract: 'DataPortabilityServers',
    fn: 'addAndTrustServerWithSignature',
    eventNames: ['ServerRegistered', 'ServerTrusted'] as const,
  },
  'DataPortabilityServers.addServerWithSignature': {
    contract: 'DataPortabilityServers',
    fn: 'addServerWithSignature',
    eventNames: ['ServerRegistered'] as const,
  },
  'DataPortabilityServers.grantRole': {
    contract: 'DataPortabilityServers',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DataPortabilityServers.initialize': {
    contract: 'DataPortabilityServers',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DataPortabilityServers.pause': {
    contract: 'DataPortabilityServers',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DataPortabilityServers.renounceRole': {
    contract: 'DataPortabilityServers',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataPortabilityServers.revokeRole': {
    contract: 'DataPortabilityServers',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataPortabilityServers.trustServer': {
    contract: 'DataPortabilityServers',
    fn: 'trustServer',
    eventNames: ['ServerTrusted'] as const,
  },
  'DataPortabilityServers.trustServerByManager': {
    contract: 'DataPortabilityServers',
    fn: 'trustServerByManager',
    eventNames: ['ServerTrusted'] as const,
  },
  'DataPortabilityServers.trustServerWithSignature': {
    contract: 'DataPortabilityServers',
    fn: 'trustServerWithSignature',
    eventNames: ['ServerTrusted'] as const,
  },
  'DataPortabilityServers.unpause': {
    contract: 'DataPortabilityServers',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DataPortabilityServers.untrustServer': {
    contract: 'DataPortabilityServers',
    fn: 'untrustServer',
    eventNames: ['ServerUntrusted'] as const,
  },
  'DataPortabilityServers.untrustServerByManager': {
    contract: 'DataPortabilityServers',
    fn: 'untrustServerByManager',
    eventNames: ['ServerUntrusted'] as const,
  },
  'DataPortabilityServers.untrustServerWithSignature': {
    contract: 'DataPortabilityServers',
    fn: 'untrustServerWithSignature',
    eventNames: ['ServerUntrusted'] as const,
  },
  'DataPortabilityServers.updateServer': {
    contract: 'DataPortabilityServers',
    fn: 'updateServer',
    eventNames: ['ServerUpdated'] as const,
  },
  'DataPortabilityServers.upgradeToAndCall': {
    contract: 'DataPortabilityServers',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DataRefinerRegistry.addRefinementService': {
    contract: 'DataRefinerRegistry',
    fn: 'addRefinementService',
    eventNames: [] as const,
  },
  'DataRefinerRegistry.addRefiner': {
    contract: 'DataRefinerRegistry',
    fn: 'addRefiner',
    eventNames: ['RefinerAdded'] as const,
  },
  'DataRefinerRegistry.addRefinerWithSchemaId': {
    contract: 'DataRefinerRegistry',
    fn: 'addRefinerWithSchemaId',
    eventNames: ['RefinerAdded'] as const,
  },
  'DataRefinerRegistry.addSchema': {
    contract: 'DataRefinerRegistry',
    fn: 'addSchema',
    eventNames: ['SchemaAdded'] as const,
  },
  'DataRefinerRegistry.grantRole': {
    contract: 'DataRefinerRegistry',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DataRefinerRegistry.initialize': {
    contract: 'DataRefinerRegistry',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DataRefinerRegistry.pause': {
    contract: 'DataRefinerRegistry',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DataRefinerRegistry.removeRefinementService': {
    contract: 'DataRefinerRegistry',
    fn: 'removeRefinementService',
    eventNames: [] as const,
  },
  'DataRefinerRegistry.renounceRole': {
    contract: 'DataRefinerRegistry',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataRefinerRegistry.revokeRole': {
    contract: 'DataRefinerRegistry',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataRefinerRegistry.unpause': {
    contract: 'DataRefinerRegistry',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DataRefinerRegistry.updateDlpRefinersOwner': {
    contract: 'DataRefinerRegistry',
    fn: 'updateDlpRefinersOwner',
    eventNames: [] as const,
  },
  'DataRefinerRegistry.updateRefinerOwner': {
    contract: 'DataRefinerRegistry',
    fn: 'updateRefinerOwner',
    eventNames: [] as const,
  },
  'DataRefinerRegistry.updateSchemaId': {
    contract: 'DataRefinerRegistry',
    fn: 'updateSchemaId',
    eventNames: [] as const,
  },
  'DataRefinerRegistry.upgradeToAndCall': {
    contract: 'DataRefinerRegistry',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'DataRegistry.addFile': {
    contract: 'DataRegistry',
    fn: 'addFile',
    eventNames: ['FileAdded'] as const,
  },
  'DataRegistry.addFilePermission': {
    contract: 'DataRegistry',
    fn: 'addFilePermission',
    eventNames: ['PermissionGranted'] as const,
  },
  'DataRegistry.addFilePermissionsAndSchema': {
    contract: 'DataRegistry',
    fn: 'addFilePermissionsAndSchema',
    eventNames: ['FileAddedV2', 'PermissionGranted'] as const,
  },
  'DataRegistry.addFileWithPermissions': {
    contract: 'DataRegistry',
    fn: 'addFileWithPermissions',
    eventNames: ['FileAdded', 'PermissionGranted'] as const,
  },
  'DataRegistry.addFileWithPermissionsAndSchema': {
    contract: 'DataRegistry',
    fn: 'addFileWithPermissionsAndSchema',
    eventNames: ['FileAdded', 'PermissionGranted'] as const,
  },
  'DataRegistry.addFileWithSchema': {
    contract: 'DataRegistry',
    fn: 'addFileWithSchema',
    eventNames: ['FileAdded'] as const,
  },
  'DataRegistry.addFileWithSignature': {
    contract: 'DataRegistry',
    fn: 'addFileWithSignature',
    eventNames: ['FileAdded'] as const,
  },
  'DataRegistry.addProof': {
    contract: 'DataRegistry',
    fn: 'addProof',
    eventNames: ['ProofAdded'] as const,
  },
  'DataRegistry.addRefinementWithPermission': {
    contract: 'DataRegistry',
    fn: 'addRefinementWithPermission',
    eventNames: ['RefinementAdded', 'PermissionGranted'] as const,
  },
  'DataRegistry.addRefinerWithSchemaId': {
    contract: 'DataRegistry',
    fn: 'addRefinerWithSchemaId',
    eventNames: [] as const,
  },
  'DataRegistry.addSchema': {
    contract: 'DataRegistry',
    fn: 'addSchema',
    eventNames: [] as const,
  },
  'DataRegistry.deleteFile': {
    contract: 'DataRegistry',
    fn: 'deleteFile',
    eventNames: ['FileDeleted'] as const,
  },
  'DataRegistry.grantRole': {
    contract: 'DataRegistry',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'DataRegistry.initialize': {
    contract: 'DataRegistry',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'DataRegistry.pause': {
    contract: 'DataRegistry',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'DataRegistry.renounceRole': {
    contract: 'DataRegistry',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataRegistry.revokeRole': {
    contract: 'DataRegistry',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'DataRegistry.unpause': {
    contract: 'DataRegistry',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'DataRegistry.updateFileMetadata': {
    contract: 'DataRegistry',
    fn: 'updateFileMetadata',
    eventNames: ['FileMetadataUpdated'] as const,
  },
  'DataRegistry.updateSchemaId': {
    contract: 'DataRegistry',
    fn: 'updateSchemaId',
    eventNames: [] as const,
  },
  'DataRegistry.upgradeToAndCall': {
    contract: 'DataRegistry',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'QueryEngine.cacheResult': {
    contract: 'QueryEngine',
    fn: 'cacheResult',
    eventNames: [] as const,
  },
  'QueryEngine.claimDlpPayment': {
    contract: 'QueryEngine',
    fn: 'claimDlpPayment',
    eventNames: ['DlpPaymentClaimed', 'Transfer'] as const,
  },
  'QueryEngine.executeQuery': {
    contract: 'QueryEngine',
    fn: 'executeQuery',
    eventNames: [] as const,
  },
  'QueryEngine.grantRole': {
    contract: 'QueryEngine',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'QueryEngine.initialize': {
    contract: 'QueryEngine',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'QueryEngine.invalidateCache': {
    contract: 'QueryEngine',
    fn: 'invalidateCache',
    eventNames: [] as const,
  },
  'QueryEngine.pause': {
    contract: 'QueryEngine',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'QueryEngine.renounceRole': {
    contract: 'QueryEngine',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'QueryEngine.revokeRole': {
    contract: 'QueryEngine',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'QueryEngine.unpause': {
    contract: 'QueryEngine',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'QueryEngine.updatePermissionApproval': {
    contract: 'QueryEngine',
    fn: 'updatePermissionApproval',
    eventNames: ['PermissionApprovalUpdated'] as const,
  },
  'QueryEngine.updateQueryLimit': {
    contract: 'QueryEngine',
    fn: 'updateQueryLimit',
    eventNames: [] as const,
  },
  'QueryEngine.upgradeToAndCall': {
    contract: 'QueryEngine',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'SwapHelper.getQuote': {
    contract: 'SwapHelper',
    fn: 'getQuote',
    eventNames: [] as const,
  },
  'SwapHelper.grantRole': {
    contract: 'SwapHelper',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'SwapHelper.initialize': {
    contract: 'SwapHelper',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'SwapHelper.pause': {
    contract: 'SwapHelper',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'SwapHelper.renounceRole': {
    contract: 'SwapHelper',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'SwapHelper.revokeRole': {
    contract: 'SwapHelper',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'SwapHelper.swap': {
    contract: 'SwapHelper',
    fn: 'swap',
    eventNames: [] as const,
  },
  'SwapHelper.unpause': {
    contract: 'SwapHelper',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'SwapHelper.updateRouter': {
    contract: 'SwapHelper',
    fn: 'updateRouter',
    eventNames: [] as const,
  },
  'SwapHelper.updateSlippage': {
    contract: 'SwapHelper',
    fn: 'updateSlippage',
    eventNames: [] as const,
  },
  'SwapHelper.upgradeToAndCall': {
    contract: 'SwapHelper',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'TeePool.addJob': {
    contract: 'TeePool',
    fn: 'addJob',
    eventNames: [] as const,
  },
  'TeePool.cancelJob': {
    contract: 'TeePool',
    fn: 'cancelJob',
    eventNames: [] as const,
  },
  'TeePool.claimReward': {
    contract: 'TeePool',
    fn: 'claimReward',
    eventNames: [] as const,
  },
  'TeePool.submitProof': {
    contract: 'TeePool',
    fn: 'submitProof',
    eventNames: [] as const,
  },
  'TeePool.updateFeeRecipient': {
    contract: 'TeePool',
    fn: 'updateFeeRecipient',
    eventNames: [] as const,
  },
  'TeePool.updateJobTimeout': {
    contract: 'TeePool',
    fn: 'updateJobTimeout',
    eventNames: [] as const,
  },
  'TeePool.updateMinJobDuration': {
    contract: 'TeePool',
    fn: 'updateMinJobDuration',
    eventNames: [] as const,
  },
  'TeePoolDedicatedGpu.addProof': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'addProof',
    eventNames: ['ProofAdded'] as const,
  },
  'TeePoolDedicatedGpu.addTee': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'addTee',
    eventNames: ['TeeAdded'] as const,
  },
  'TeePoolDedicatedGpu.cancelJob': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'cancelJob',
    eventNames: ['JobCanceled'] as const,
  },
  'TeePoolDedicatedGpu.claim': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'claim',
    eventNames: ['Claimed'] as const,
  },
  'TeePoolDedicatedGpu.grantRole': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'TeePoolDedicatedGpu.initialize': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'TeePoolDedicatedGpu.pause': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'TeePoolDedicatedGpu.removeJob': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'removeJob',
    eventNames: ['JobRemoved'] as const,
  },
  'TeePoolDedicatedGpu.removeTee': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'removeTee',
    eventNames: ['TeeRemoved'] as const,
  },
  'TeePoolDedicatedGpu.renounceRole': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolDedicatedGpu.revokeRole': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolDedicatedGpu.submitJob': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'submitJob',
    eventNames: ['JobSubmitted'] as const,
  },
  'TeePoolDedicatedGpu.unpause': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'TeePoolDedicatedGpu.upgradeToAndCall': {
    contract: 'TeePoolDedicatedGpu',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'TeePoolDedicatedStandard.addProof': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'addProof',
    eventNames: ['ProofAdded'] as const,
  },
  'TeePoolDedicatedStandard.addTee': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'addTee',
    eventNames: ['TeeAdded'] as const,
  },
  'TeePoolDedicatedStandard.cancelJob': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'cancelJob',
    eventNames: ['JobCanceled'] as const,
  },
  'TeePoolDedicatedStandard.claim': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'claim',
    eventNames: ['Claimed'] as const,
  },
  'TeePoolDedicatedStandard.grantRole': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'TeePoolDedicatedStandard.initialize': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'TeePoolDedicatedStandard.pause': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'TeePoolDedicatedStandard.removeJob': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'removeJob',
    eventNames: ['JobRemoved'] as const,
  },
  'TeePoolDedicatedStandard.removeTee': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'removeTee',
    eventNames: ['TeeRemoved'] as const,
  },
  'TeePoolDedicatedStandard.renounceRole': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolDedicatedStandard.revokeRole': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolDedicatedStandard.submitJob': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'submitJob',
    eventNames: ['JobSubmitted'] as const,
  },
  'TeePoolDedicatedStandard.unpause': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'TeePoolDedicatedStandard.upgradeToAndCall': {
    contract: 'TeePoolDedicatedStandard',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'TeePoolEphemeralStandard.addProof': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'addProof',
    eventNames: ['ProofAdded'] as const,
  },
  'TeePoolEphemeralStandard.addTee': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'addTee',
    eventNames: ['TeeAdded'] as const,
  },
  'TeePoolEphemeralStandard.cancelJob': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'cancelJob',
    eventNames: ['JobCanceled'] as const,
  },
  'TeePoolEphemeralStandard.claim': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'claim',
    eventNames: ['Claimed'] as const,
  },
  'TeePoolEphemeralStandard.grantRole': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'TeePoolEphemeralStandard.initialize': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'TeePoolEphemeralStandard.pause': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'TeePoolEphemeralStandard.removeJob': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'removeJob',
    eventNames: ['JobRemoved'] as const,
  },
  'TeePoolEphemeralStandard.removeTee': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'removeTee',
    eventNames: ['TeeRemoved'] as const,
  },
  'TeePoolEphemeralStandard.renounceRole': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolEphemeralStandard.revokeRole': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolEphemeralStandard.submitJob': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'submitJob',
    eventNames: ['JobSubmitted'] as const,
  },
  'TeePoolEphemeralStandard.unpause': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'TeePoolEphemeralStandard.upgradeToAndCall': {
    contract: 'TeePoolEphemeralStandard',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'TeePoolPersistentGpu.addProof': {
    contract: 'TeePoolPersistentGpu',
    fn: 'addProof',
    eventNames: ['ProofAdded'] as const,
  },
  'TeePoolPersistentGpu.addTee': {
    contract: 'TeePoolPersistentGpu',
    fn: 'addTee',
    eventNames: ['TeeAdded'] as const,
  },
  'TeePoolPersistentGpu.cancelJob': {
    contract: 'TeePoolPersistentGpu',
    fn: 'cancelJob',
    eventNames: ['JobCanceled'] as const,
  },
  'TeePoolPersistentGpu.claim': {
    contract: 'TeePoolPersistentGpu',
    fn: 'claim',
    eventNames: ['Claimed'] as const,
  },
  'TeePoolPersistentGpu.grantRole': {
    contract: 'TeePoolPersistentGpu',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'TeePoolPersistentGpu.initialize': {
    contract: 'TeePoolPersistentGpu',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'TeePoolPersistentGpu.pause': {
    contract: 'TeePoolPersistentGpu',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'TeePoolPersistentGpu.removeJob': {
    contract: 'TeePoolPersistentGpu',
    fn: 'removeJob',
    eventNames: ['JobRemoved'] as const,
  },
  'TeePoolPersistentGpu.removeTee': {
    contract: 'TeePoolPersistentGpu',
    fn: 'removeTee',
    eventNames: ['TeeRemoved'] as const,
  },
  'TeePoolPersistentGpu.renounceRole': {
    contract: 'TeePoolPersistentGpu',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolPersistentGpu.revokeRole': {
    contract: 'TeePoolPersistentGpu',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolPersistentGpu.submitJob': {
    contract: 'TeePoolPersistentGpu',
    fn: 'submitJob',
    eventNames: ['JobSubmitted'] as const,
  },
  'TeePoolPersistentGpu.unpause': {
    contract: 'TeePoolPersistentGpu',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'TeePoolPersistentGpu.upgradeToAndCall': {
    contract: 'TeePoolPersistentGpu',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'TeePoolPersistentStandard.addProof': {
    contract: 'TeePoolPersistentStandard',
    fn: 'addProof',
    eventNames: ['ProofAdded'] as const,
  },
  'TeePoolPersistentStandard.addTee': {
    contract: 'TeePoolPersistentStandard',
    fn: 'addTee',
    eventNames: ['TeeAdded'] as const,
  },
  'TeePoolPersistentStandard.cancelJob': {
    contract: 'TeePoolPersistentStandard',
    fn: 'cancelJob',
    eventNames: ['JobCanceled'] as const,
  },
  'TeePoolPersistentStandard.claim': {
    contract: 'TeePoolPersistentStandard',
    fn: 'claim',
    eventNames: ['Claimed'] as const,
  },
  'TeePoolPersistentStandard.grantRole': {
    contract: 'TeePoolPersistentStandard',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'TeePoolPersistentStandard.initialize': {
    contract: 'TeePoolPersistentStandard',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'TeePoolPersistentStandard.pause': {
    contract: 'TeePoolPersistentStandard',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'TeePoolPersistentStandard.removeJob': {
    contract: 'TeePoolPersistentStandard',
    fn: 'removeJob',
    eventNames: ['JobRemoved'] as const,
  },
  'TeePoolPersistentStandard.removeTee': {
    contract: 'TeePoolPersistentStandard',
    fn: 'removeTee',
    eventNames: ['TeeRemoved'] as const,
  },
  'TeePoolPersistentStandard.renounceRole': {
    contract: 'TeePoolPersistentStandard',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolPersistentStandard.revokeRole': {
    contract: 'TeePoolPersistentStandard',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolPersistentStandard.submitJob': {
    contract: 'TeePoolPersistentStandard',
    fn: 'submitJob',
    eventNames: ['JobSubmitted'] as const,
  },
  'TeePoolPersistentStandard.unpause': {
    contract: 'TeePoolPersistentStandard',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'TeePoolPersistentStandard.upgradeToAndCall': {
    contract: 'TeePoolPersistentStandard',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'TeePoolPhala.addProof': {
    contract: 'TeePoolPhala',
    fn: 'addProof',
    eventNames: ['ProofAdded'] as const,
  },
  'TeePoolPhala.addTee': {
    contract: 'TeePoolPhala',
    fn: 'addTee',
    eventNames: ['TeeAdded'] as const,
  },
  'TeePoolPhala.cancelJob': {
    contract: 'TeePoolPhala',
    fn: 'cancelJob',
    eventNames: ['JobCanceled'] as const,
  },
  'TeePoolPhala.claim': {
    contract: 'TeePoolPhala',
    fn: 'claim',
    eventNames: ['Claimed'] as const,
  },
  'TeePoolPhala.grantRole': {
    contract: 'TeePoolPhala',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'TeePoolPhala.initialize': {
    contract: 'TeePoolPhala',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'TeePoolPhala.pause': {
    contract: 'TeePoolPhala',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'TeePoolPhala.removeTee': {
    contract: 'TeePoolPhala',
    fn: 'removeTee',
    eventNames: ['TeeRemoved'] as const,
  },
  'TeePoolPhala.renounceRole': {
    contract: 'TeePoolPhala',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolPhala.requestContributionProof': {
    contract: 'TeePoolPhala',
    fn: 'requestContributionProof',
    eventNames: ['JobSubmitted'] as const,
  },
  'TeePoolPhala.revokeRole': {
    contract: 'TeePoolPhala',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'TeePoolPhala.submitJob': {
    contract: 'TeePoolPhala',
    fn: 'submitJob',
    eventNames: ['JobSubmitted'] as const,
  },
  'TeePoolPhala.unpause': {
    contract: 'TeePoolPhala',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'TeePoolPhala.upgradeToAndCall': {
    contract: 'TeePoolPhala',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'VanaEpoch.forceFinalizedEpoch': {
    contract: 'VanaEpoch',
    fn: 'forceFinalizedEpoch',
    eventNames: ['EpochFinalized'] as const,
  },
  'VanaEpoch.grantRole': {
    contract: 'VanaEpoch',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'VanaEpoch.initialize': {
    contract: 'VanaEpoch',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'VanaEpoch.overrideEpochDlpReward': {
    contract: 'VanaEpoch',
    fn: 'overrideEpochDlpReward',
    eventNames: ['EpochDlpRewardOverridden'] as const,
  },
  'VanaEpoch.pause': {
    contract: 'VanaEpoch',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'VanaEpoch.renounceRole': {
    contract: 'VanaEpoch',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaEpoch.revokeRole': {
    contract: 'VanaEpoch',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaEpoch.saveEpochDlpRewards': {
    contract: 'VanaEpoch',
    fn: 'saveEpochDlpRewards',
    eventNames: ['EpochDlpRewardAdded', 'EpochFinalized'] as const,
  },
  'VanaEpoch.unpause': {
    contract: 'VanaEpoch',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'VanaEpoch.updateDaySize': {
    contract: 'VanaEpoch',
    fn: 'updateDaySize',
    eventNames: ['EpochDayUpdated'] as const,
  },
  'VanaEpoch.updateEpoch': {
    contract: 'VanaEpoch',
    fn: 'updateEpoch',
    eventNames: ['EpochCreated', 'EpochUpdated'] as const,
  },
  'VanaEpoch.updateEpochRewardAmount': {
    contract: 'VanaEpoch',
    fn: 'updateEpochRewardAmount',
    eventNames: ['EpochRewardAmountUpdated'] as const,
  },
  'VanaEpoch.updateEpochSize': {
    contract: 'VanaEpoch',
    fn: 'updateEpochSize',
    eventNames: ['EpochSizeUpdated'] as const,
  },
  'VanaEpoch.upgradeToAndCall': {
    contract: 'VanaEpoch',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'VanaPoolEntity.addRewards': {
    contract: 'VanaPoolEntity',
    fn: 'addRewards',
    eventNames: ['RewardsAdded'] as const,
  },
  'VanaPoolEntity.createEntity': {
    contract: 'VanaPoolEntity',
    fn: 'createEntity',
    eventNames: ['EntityCreated', 'EntityStatusUpdated'] as const,
  },
  'VanaPoolEntity.grantRole': {
    contract: 'VanaPoolEntity',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'VanaPoolEntity.initialize': {
    contract: 'VanaPoolEntity',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'VanaPoolEntity.pause': {
    contract: 'VanaPoolEntity',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'VanaPoolEntity.processRewards': {
    contract: 'VanaPoolEntity',
    fn: 'processRewards',
    eventNames: ['RewardsProcessed'] as const,
  },
  'VanaPoolEntity.registerEntity': {
    contract: 'VanaPoolEntity',
    fn: 'registerEntity',
    eventNames: ['EntityRegistered'] as const,
  },
  'VanaPoolEntity.renounceRole': {
    contract: 'VanaPoolEntity',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaPoolEntity.revokeRole': {
    contract: 'VanaPoolEntity',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaPoolEntity.unpause': {
    contract: 'VanaPoolEntity',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'VanaPoolEntity.unregisterEntity': {
    contract: 'VanaPoolEntity',
    fn: 'unregisterEntity',
    eventNames: ['EntityUnregistered'] as const,
  },
  'VanaPoolEntity.updateEntity': {
    contract: 'VanaPoolEntity',
    fn: 'updateEntity',
    eventNames: ['EntityUpdated'] as const,
  },
  'VanaPoolEntity.updateEntityMaxAPY': {
    contract: 'VanaPoolEntity',
    fn: 'updateEntityMaxAPY',
    eventNames: ['EntityMaxAPYUpdated', 'RewardsProcessed'] as const,
  },
  'VanaPoolEntity.updateEntityMetadata': {
    contract: 'VanaPoolEntity',
    fn: 'updateEntityMetadata',
    eventNames: ['EntityMetadataUpdated'] as const,
  },
  'VanaPoolEntity.upgradeToAndCall': {
    contract: 'VanaPoolEntity',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'VanaPoolStaking.claimRewards': {
    contract: 'VanaPoolStaking',
    fn: 'claimRewards',
    eventNames: [] as const,
  },
  'VanaPoolStaking.grantRole': {
    contract: 'VanaPoolStaking',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'VanaPoolStaking.initialize': {
    contract: 'VanaPoolStaking',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'VanaPoolStaking.pause': {
    contract: 'VanaPoolStaking',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'VanaPoolStaking.registerEntityStake': {
    contract: 'VanaPoolStaking',
    fn: 'registerEntityStake',
    eventNames: ['Staked'] as const,
  },
  'VanaPoolStaking.renounceRole': {
    contract: 'VanaPoolStaking',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaPoolStaking.revokeRole': {
    contract: 'VanaPoolStaking',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaPoolStaking.stake': {
    contract: 'VanaPoolStaking',
    fn: 'stake',
    eventNames: ['Staked'] as const,
  },
  'VanaPoolStaking.unpause': {
    contract: 'VanaPoolStaking',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'VanaPoolStaking.unstake': {
    contract: 'VanaPoolStaking',
    fn: 'unstake',
    eventNames: ['Unstaked'] as const,
  },
  'VanaPoolStaking.updateMinStakeAmount': {
    contract: 'VanaPoolStaking',
    fn: 'updateMinStakeAmount',
    eventNames: ['MinStakeUpdated'] as const,
  },
  'VanaPoolStaking.upgradeToAndCall': {
    contract: 'VanaPoolStaking',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'VanaPoolTreasury.allocateFunds': {
    contract: 'VanaPoolTreasury',
    fn: 'allocateFunds',
    eventNames: [] as const,
  },
  'VanaPoolTreasury.deposit': {
    contract: 'VanaPoolTreasury',
    fn: 'deposit',
    eventNames: [] as const,
  },
  'VanaPoolTreasury.grantRole': {
    contract: 'VanaPoolTreasury',
    fn: 'grantRole',
    eventNames: ['RoleGranted'] as const,
  },
  'VanaPoolTreasury.initialize': {
    contract: 'VanaPoolTreasury',
    fn: 'initialize',
    eventNames: ['Initialized'] as const,
  },
  'VanaPoolTreasury.pause': {
    contract: 'VanaPoolTreasury',
    fn: 'pause',
    eventNames: ['Paused'] as const,
  },
  'VanaPoolTreasury.renounceRole': {
    contract: 'VanaPoolTreasury',
    fn: 'renounceRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaPoolTreasury.revokeRole': {
    contract: 'VanaPoolTreasury',
    fn: 'revokeRole',
    eventNames: ['RoleRevoked'] as const,
  },
  'VanaPoolTreasury.unpause': {
    contract: 'VanaPoolTreasury',
    fn: 'unpause',
    eventNames: ['Unpaused'] as const,
  },
  'VanaPoolTreasury.updateBudget': {
    contract: 'VanaPoolTreasury',
    fn: 'updateBudget',
    eventNames: [] as const,
  },
  'VanaPoolTreasury.updateTreasuryAddress': {
    contract: 'VanaPoolTreasury',
    fn: 'updateTreasuryAddress',
    eventNames: [] as const,
  },
  'VanaPoolTreasury.upgradeToAndCall': {
    contract: 'VanaPoolTreasury',
    fn: 'upgradeToAndCall',
    eventNames: ['Upgraded'] as const,
  },
  'VanaPoolTreasury.withdraw': {
    contract: 'VanaPoolTreasury',
    fn: 'withdraw',
    eventNames: [] as const,
  },
} as const;

// O(1) candidate retrieval: topic -> one or more ABI variants
// Properly handles collisions where multiple events have same signature
// Use TOPIC_TO_ABIS.has(topic) for O(1) filtering - no need for separate Set
export const TOPIC_TO_ABIS = /*#__PURE__*/ new Map<`0x${string}`, readonly AbiEvent[]>([
  [
    '0x017b1c583db0d753e82f5a7f7b94f64603f7e401eb2c40271a8edce1431cf09e' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: false, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'startBlock', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'endBlock', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'rewardAmount', type: 'uint256' },
        ],
        name: 'EpochCreated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31' as `0x${string}`,
    [{ anonymous: false, inputs: [], name: 'EIP712DomainChanged', type: 'event' }] as const,
  ],
  [
    '0x13351629ca30f2a87ba5f6af1bd14d50cb200148aa96ec180bad6668cfb38a20' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          {
            indexed: false,
            internalType: 'uint256',
            name: 'tradingVolumeScorePenalty',
            type: 'uint256',
          },
          {
            indexed: false,
            internalType: 'uint256',
            name: 'uniqueContributorsScorePenalty',
            type: 'uint256',
          },
          {
            indexed: false,
            internalType: 'uint256',
            name: 'dataAccessFeesScorePenalty',
            type: 'uint256',
          },
        ],
        name: 'EpochDlpPenaltyUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x17700ceb1658b18206f427c1578048e87504106b14ec69e9b4586d9a95174a32' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'staker', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'sharesIssued', type: 'uint256' },
        ],
        name: 'Staked',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x18a003b29a5d1b1d6f0603956003fdc00a42ea8db3825c24a6bf532d5bae0bdf' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: true, internalType: 'address', name: 'teeAddress', type: 'address' }],
        name: 'TeeRemoved',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x1bace2b9ccc89d67d840a89b412ec371627fdba942715a6226aec894c66f4ad2' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'distributedAmount', type: 'uint256' },
        ],
        name: 'RewardsProcessed',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x26d641f490c3ef8f9e4e06b320b40715123f4c3dd42cf3e3c9eedaad9a10a91c' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'refinerId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'url', type: 'string' },
        ],
        name: 'RefinementUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x27acf0dfa49783328b0f6b3cf96a7301f7a1eac9ab08791912c0d55616327e85' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'dlpTreasuryAddress', type: 'address' },
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'DlpPaymentClaimed',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x290ce03462744f867c8a1d24b17c1c7568a1339dbf9c82c59bcfecbd6d2186b6' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: 'enum IComputeEngineTeePool.HardwareType',
            name: 'newHardwareType',
            type: 'uint8',
          },
        ],
        name: 'HardwareTypeUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x2980b13036c0d9df6b71ea9e9c09536efd24d7dd1868e29aa730f0c3fbd1a0dc' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'ownerAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'url', type: 'string' },
        ],
        name: 'FileAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x2ce2df96b3f88dc893c7d10d38553c8f1abbcf5e25a0c5b13030f5d85d4b1f08' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'refinerId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'url', type: 'string' },
        ],
        name: 'RefinementAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x2cff87230608e71ec991ee7212c0cc861c08b275ecc30716cdc7681cc0fdc288' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'permissionId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'user', type: 'address' },
          { indexed: true, internalType: 'uint256', name: 'granteeId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'grant', type: 'string' },
          { indexed: false, internalType: 'uint256[]', name: 'fileIds', type: 'uint256[]' },
        ],
        name: 'PermissionAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'bytes32', name: 'role', type: 'bytes32' },
          { indexed: true, internalType: 'address', name: 'account', type: 'address' },
          { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
        ],
        name: 'RoleGranted',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x2fe8cb48ce95af273ee232223c3a0fbda25a65208753e99801ce508751f2b7fb' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: 'uint256',
            name: 'newEpochRewardAmount',
            type: 'uint256',
          },
        ],
        name: 'EpochRewardAmountUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'delegator', type: 'address' },
          { indexed: true, internalType: 'address', name: 'fromDelegate', type: 'address' },
          { indexed: true, internalType: 'address', name: 'toDelegate', type: 'address' },
        ],
        name: 'DelegateChanged',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x32009efb3b9fd643bad87a5bcff3fe0872cc599da290475cec2231b6e668d8a7' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: false, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'rewardAmount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'penaltyAmount', type: 'uint256' },
        ],
        name: 'EpochDlpRewardAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x33b65b0a9a715aea3bbcf1e054d4012e3752f2a4a98447c61b14be6fa587df5d' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'teeAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'url', type: 'string' },
          { indexed: false, internalType: 'string', name: 'publicKey', type: 'string' },
        ],
        name: 'TeeAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x385b21b54e2348e690dec29e9741026142b02eaabfcc2fcb676cebcb7cd16534' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: true, internalType: 'address', name: '', type: 'address' }],
        name: 'AddressUnblocked',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x3bb166e4137315c91d732d88cef4a9ce0c0f75492f23704ea0b80e885144846c' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'wallet', type: 'address' },
          { indexed: true, internalType: 'address', name: 'beneficiary', type: 'address' },
          { indexed: false, internalType: 'uint64', name: 'start', type: 'uint64' },
          { indexed: false, internalType: 'uint64', name: 'cliff', type: 'uint64' },
          { indexed: false, internalType: 'uint64', name: 'duration', type: 'uint64' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'VestingWalletCreated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x3c5d8e2b4dedd285c347941d3f9f922359ba9821c0db27bbd73c8d2090191e4e' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
          { indexed: true, internalType: 'address', name: 'recipient', type: 'address' },
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'usedVanaForReward', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'tokenRewardAmount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'usedVanaForLp', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'liquidityDelta', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'spareVana', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'spareToken', type: 'uint256' },
        ],
        name: 'Reward',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x3c8b774b3cc0f2fdfe02c6d8263d345cd4ca81be1636bbd90a2ebc2d4866c289' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'teePoolAddress', type: 'address' },
          { indexed: false, internalType: 'address', name: 'teeAddress', type: 'address' },
        ],
        name: 'TeeAssignmentSucceeded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x3cd59cf395448ba3bfd2541dcb31ccd800b9e303281df0888a62ae5d5f673f58' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: false, internalType: 'uint256', name: 'newEpochSize', type: 'uint256' },
        ],
        name: 'EpochSizeUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x3f2c2e74f8183acb3a3ecca3d7993216d3026a732399784c4143f5f4b631e56a' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'address', name: 'tokenAddress', type: 'address' },
        ],
        name: 'DlpTokenUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x40df43107e8b4d467127964bd3c966687c0a6a39aaede970755397fd09535e98' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'RewardsAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x41eb9d6336d189fb4bf444a6b5056628c51aa4405c87f7389a107686e8057263' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'attestator', type: 'address' },
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
        ],
        name: 'ProofAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x45b07ce1a3b95a3c1a77c50855721549f744c3b35dcdb9586af21fd2f25219ee' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'ownerAddress', type: 'address' },
        ],
        name: 'JobRegistered',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x4700587a90f43e584ef58af08d40dd9622ca3ee15baa07dc9d58ecf43b598324' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'ownerAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'url', type: 'string' },
          { indexed: false, internalType: 'uint256', name: 'schemaId', type: 'uint256' },
        ],
        name: 'FileAddedV2',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x47ab46f2c8d4258304a2f5551c1cbdb6981be49631365d1ba7191288a73f39ef' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: false, internalType: 'uint256', name: 'newMinStake', type: 'uint256' }],
        name: 'MinStakeUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x489e923ac6ba31ef19d89736ac6998000e3fe5b1d1f26174a2c12e02393aa67e' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
          { indexed: false, internalType: 'address', name: 'teeAddress', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'bidAmount', type: 'uint256' },
        ],
        name: 'JobSubmitted',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'account', type: 'address' },
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'Deposit',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x5915e09309d8c49870559891647e368d0ab0e6d94a0ce7f3c9f39470ccbe03d2' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'permissionId', type: 'uint256' },
          { indexed: false, internalType: 'bool', name: 'approved', type: 'bool' },
        ],
        name: 'PermissionApprovalUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x5af3b114dddfd44680542ae7249f451fe090600c3ce4d7b44c0da517f245d569' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'distributedAmount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'totalPenaltyAmount', type: 'uint256' },
        ],
        name: 'EpochDlpPenaltyDistributed',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: false, internalType: 'address', name: 'account', type: 'address' }],
        name: 'Unpaused',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: false, internalType: 'address', name: 'account', type: 'address' }],
        name: 'Paused',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x63792737c309757efad02dff578bab5f702acaba5d648620b286dd83beccb599' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: false, internalType: 'uint256', name: 'newDaySize', type: 'uint256' }],
        name: 'EpochDayUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x6501ba8882f36c4ef484e985502dbdeddd70c71882c427b897f7976de450cbea' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'lpTokenId', type: 'uint256' },
        ],
        name: 'DlpLpTokenIdUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x66f9a9bffa3173cfd88573ba6e37b71c50501deae5c916c376815859973f7e47' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'newMaxAPY', type: 'uint256' },
        ],
        name: 'EntityMaxAPYUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x68444dd5a0550c4162ef61805448ef75592e95aec6adf91a535383c69a37a582' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: false, internalType: 'bytes', name: 'reason', type: 'bytes' },
        ],
        name: 'TeeAssignmentFailed',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x68a66a704ceacc38da3f12c63779e47866d9d72e875ec5d43237777adc666d65' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' }],
        name: 'JobCanceled',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x6ac6c02c73a1841cb185dff1fe5282ff4499ce709efd387f7fc6de10a5124320' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
          { indexed: true, internalType: 'address', name: 'recipient', type: 'address' },
          { indexed: true, internalType: 'address', name: 'tokenIn', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amountIn', type: 'uint256' },
          { indexed: false, internalType: 'address', name: 'tokenOut', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amountOut', type: 'uint256' },
        ],
        name: 'Swap',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x6daba074dba7f6e2f5fd289e20080bf7047e96329b083fc1dab326fbefd762bb' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' }],
        name: 'JobRemoved',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x6e0403ef2b13328247bf9260ad8dd9c18fb5a18b95ea25de817ca991da05929b' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'account', type: 'address' },
        ],
        name: 'PermissionGranted',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x6fd2fa3d57f2e53cf8912029fe8105e05f231c89175122d32ad7ebe79281a9a1' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: true, internalType: 'bytes32', name: 'salt', type: 'bytes32' },
          { indexed: false, internalType: 'string', name: 'name', type: 'string' },
          { indexed: false, internalType: 'string', name: 'symbol', type: 'string' },
          { indexed: false, internalType: 'address', name: 'owner', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'cap', type: 'uint256' },
        ],
        name: 'DATCreated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x71e52c6f4049fe22c5428eeaa0409df0cd7c897f716a9a0fa8b95851f8d608a2' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'granteeId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'owner', type: 'address' },
          { indexed: true, internalType: 'address', name: 'granteeAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'publicKey', type: 'string' },
        ],
        name: 'GranteeRegistered',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x71fa9c99da9552de60a9ccf693f5a91456cbb8c205c8e532b1f55339903543cf' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: true, internalType: 'address', name: '', type: 'address' }],
        name: 'AddressBlocked',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x722508f612f32b765b27ca15934c5c89806cdecd1ecd4b83631a9d12d15ddac3' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'dlpAddress', type: 'address' },
          { indexed: false, internalType: 'address', name: 'ownerAddress', type: 'address' },
          { indexed: false, internalType: 'address', name: 'treasuryAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'name', type: 'string' },
          { indexed: false, internalType: 'string', name: 'iconUrl', type: 'string' },
          { indexed: false, internalType: 'string', name: 'website', type: 'string' },
          { indexed: false, internalType: 'string', name: 'metadata', type: 'string' },
        ],
        name: 'DlpUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x750e6bbedd4312ada35caa75e07fc0b85f1a6fc9c675e6962aef846918711097' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'refinerId', type: 'uint256' },
        ],
        name: 'PaymentReceived',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x77c6570970c38bcbef0f4075021f00b93c11bf5ecdb11f0a03db50dcbf584ad8' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          {
            indexed: false,
            internalType: 'enum IDLPRegistry.DlpStatus',
            name: 'newStatus',
            type: 'uint8',
          },
        ],
        name: 'DlpStatusUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x7e10352322059a1551895fd08eeb01cf1941c19a078c5725b53e17ec77217082' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'ownerAddress', type: 'address' },
        ],
        name: 'EntityStakeRegistered',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x7f5bfe3018715b26a7067888a5c42912fbb3485170b8154ea9a448661f2f0de2' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'PaymentExecuted',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x8190b61b2b9df10a827d92935819f66f3b1550edb0f0758af099ea3672873151' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: 'enum IComputeEngineTeePool.TeePoolType',
            name: 'newTeePoolType',
            type: 'uint8',
          },
        ],
        name: 'TeePoolTypeUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x81fcb2f447f377b0f52d7c0ba6265f7369561e352e3279ac76480983f81f319c' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'dlpAddress', type: 'address' },
          { indexed: false, internalType: 'address', name: 'ownerAddress', type: 'address' },
          { indexed: false, internalType: 'address', name: 'treasuryAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'name', type: 'string' },
          { indexed: false, internalType: 'string', name: 'iconUrl', type: 'string' },
          { indexed: false, internalType: 'string', name: 'website', type: 'string' },
          { indexed: false, internalType: 'string', name: 'metadata', type: 'string' },
        ],
        name: 'DlpRegistered',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x872cb0aacd34968c9f40170e4e29f6edb40dd473cd4a4662992a32f09bb54724' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'trancheId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'trancheAmount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'tokenRewardAmount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'spareToken', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'spareVana', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'usedVanaAmount', type: 'uint256' },
        ],
        name: 'EpochDlpRewardDistributed',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x87c4ec2c999f8f02975055f9b959c97108d5a6ab8742d9e2c8a94e9f46fda0ef' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'user', type: 'address' },
          { indexed: true, internalType: 'uint256', name: 'serverId', type: 'uint256' },
        ],
        name: 'ServerTrusted',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'owner', type: 'address' },
          { indexed: true, internalType: 'address', name: 'spender', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'value', type: 'uint256' },
        ],
        name: 'Approval',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x8fc0db93d562284b2140b5ba84181e6d8649504e729013e6a8c704ffb08d04b9' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: false, internalType: 'uint256', name: 'epochId', type: 'uint256' }],
        name: 'EpochFinalized',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'account', type: 'address' },
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'Withdraw',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xa3f11bc4db6f6dd6ca6cca1428fa937158436e65ce0da289b5a37887b6025638' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          {
            indexed: false,
            internalType: 'enum IComputeEngine.JobStatus',
            name: 'status',
            type: 'uint8',
          },
          { indexed: false, internalType: 'string', name: 'statusMessage', type: 'string' },
        ],
        name: 'JobStatusUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xa7ab1230134c09caa1e7d69e394e58c9774afb4c08d4a13209d3a74a72e0e394' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          {
            indexed: false,
            internalType: 'enum IVanaPoolEntity.EntityStatus',
            name: 'newStatus',
            type: 'uint8',
          },
        ],
        name: 'EntityStatusUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xac1cb2ea540715774cd22a890314044f6daf1fb60f81a378e5628ca63efa7110' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          {
            indexed: false,
            internalType: 'uint256',
            name: 'verificationBlockNumber',
            type: 'uint256',
          },
        ],
        name: 'DlpVerificationBlockUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xad1edd3d37e0441e7e8ecebd40bf47260c0d005f2bbb99692ccfcb2fa37b3883' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: false, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'startBlock', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'endBlock', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'rewardAmount', type: 'uint256' },
        ],
        name: 'EpochUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xb29e1eca99b3296ba4f60344073d5efc326e3d261617fcaeb23d850d61499bd6' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'refinerId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'name', type: 'string' },
          { indexed: true, internalType: 'uint256', name: 'schemaId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'schemaDefinitionUrl', type: 'string' },
          {
            indexed: false,
            internalType: 'string',
            name: 'refinementInstructionUrl',
            type: 'string',
          },
        ],
        name: 'RefinerAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xb40aa50daa3e3766bf57657fcede8cec0113cdb04b8653239b4b3837095f16bb' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: false, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'rewardAmount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'penaltyAmount', type: 'uint256' },
        ],
        name: 'EpochDlpRewardOverridden',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xb6401d43ec4bc776d2e2724cc2ed348bc74b037aad13c3fea8bb4cf43d113135' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'schemaId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'name', type: 'string' },
          { indexed: false, internalType: 'string', name: 'dialect', type: 'string' },
          { indexed: false, internalType: 'string', name: 'definitionUrl', type: 'string' },
        ],
        name: 'SchemaAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'implementation', type: 'address' },
        ],
        name: 'Upgraded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xbd2f369520a556322443e6986d9103d0bc2f27fe6de3a0987c418b5b95a49233' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'computeInstructionId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'owner', type: 'address' },
          { indexed: false, internalType: 'string', name: 'computeInstructionUrl', type: 'string' },
          {
            indexed: false,
            internalType: 'bytes32',
            name: 'computeInstructionHash',
            type: 'bytes32',
          },
        ],
        name: 'ComputeInstructionAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'bytes32', name: 'role', type: 'bytes32' },
          { indexed: true, internalType: 'bytes32', name: 'previousAdminRole', type: 'bytes32' },
          { indexed: true, internalType: 'bytes32', name: 'newAdminRole', type: 'bytes32' },
        ],
        name: 'RoleAdminChanged',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xc18055339d3481a334f2bf553f5687d28178158490c8ad81a86a4ab03adc3470' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: false, internalType: 'address', name: 'ownerAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'name', type: 'string' },
        ],
        name: 'EntityUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: false, internalType: 'uint64', name: 'version', type: 'uint64' }],
        name: 'Initialized',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xc8a9a6a181cb55eed6156d6dd78a38f724344c00428a256435c007f2bcf35114' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: true, internalType: 'uint256', name: 'permissionId', type: 'uint256' }],
        name: 'PermissionRevoked',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xc8b61e82585cd516b06ef965707f4d12d78f8b47cc837f1221e76d22a50a2404' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: false, internalType: 'uint256', name: 'tradingVolume', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'uniqueContributors', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'dataAccessFees', type: 'uint256' },
        ],
        name: 'MetricWeightsUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xcc7ab74a9b11b56487e4c7356320d0be894972f6132884ccd04e04baa284fb79' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [{ indexed: true, internalType: 'address', name: 'teeAddress', type: 'address' }],
        name: 'TeeAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xd1f92903a241da12e7ad59502ea174e18036a4a8ae63a8779660577dc47c9e67' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'permissionId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'grantee', type: 'address' },
          { indexed: true, internalType: 'uint256', name: 'refinerId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'tableName', type: 'string' },
          { indexed: false, internalType: 'string', name: 'columnName', type: 'string' },
          { indexed: false, internalType: 'address', name: 'tokenAddress', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'price', type: 'uint256' },
        ],
        name: 'PermissionAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xd5593c4bcad9d8180499c9950bd809941c0e8a8fd9031a740964eab17aacd178' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'computeInstructionId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'bool', name: 'approved', type: 'bool' },
        ],
        name: 'ComputeInstructionUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xd568f486da04b49b70afcf7b829e7f9e8963338430f4e4befd65129fdc993bf5' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: false, internalType: 'address', name: 'ownerAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'name', type: 'string' },
          { indexed: false, internalType: 'uint256', name: 'maxAPY', type: 'uint256' },
        ],
        name: 'EntityCreated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xd5c5f9c2c466cde03c7a1863dbdcd4afec36e3ae7ce06ccc8b22c447686d3336' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'tradingVolume', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'uniqueContributors', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'dataAccessFees', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'tradingVolumeScore', type: 'uint256' },
          {
            indexed: false,
            internalType: 'uint256',
            name: 'uniqueContributorsScore',
            type: 'uint256',
          },
          { indexed: false, internalType: 'uint256', name: 'dataAccessFeesScore', type: 'uint256' },
        ],
        name: 'EpochDlpPerformancesOverridden',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'teeAddress', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'Claimed',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'to', type: 'address' },
          { indexed: true, internalType: 'address', name: 'token', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
        ],
        name: 'Transfer',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'delegate', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'previousVotes', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'newVotes', type: 'uint256' },
        ],
        name: 'DelegateVotesChanged',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xe082917d1df24c089c98cea7cf69a4e75e16c9832994eae12359ac6dc8f050cd' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: 'uint256',
            name: 'newDlpRegistrationDepositAmount',
            type: 'uint256',
          },
        ],
        name: 'DlpRegistrationDepositAmountUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xe11c4b38855d86735092f8c7e790a86765bacd0fe47618b41eb0c5142aea69c8' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'bool', name: 'verified', type: 'bool' },
        ],
        name: 'DlpVerificationUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xe5e42fb20f0e680172f6a278ac2230bbf6107e91c64d66d6ae98f9e49c3dc715' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'serverId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'owner', type: 'address' },
          { indexed: true, internalType: 'address', name: 'serverAddress', type: 'address' },
          { indexed: false, internalType: 'string', name: 'publicKey', type: 'string' },
          { indexed: false, internalType: 'string', name: 'url', type: 'string' },
        ],
        name: 'ServerRegistered',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xe6e4d29c408e4011f6d4dd4d336b135fec34a07efce1d008b9b4309a7c75cdce' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'serverId', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'url', type: 'string' },
        ],
        name: 'ServerUpdated',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xef448dca1e95226d5af380d5817c753c86946ef53cffb238e5fbe889230565c7' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'fileId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'ownerAddress', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'proofIndex', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'score', type: 'uint256' },
          { indexed: false, internalType: 'string', name: 'proofUrl', type: 'string' },
        ],
        name: 'ProofAdded',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xef887310a4cb477fd13d3c0c1030e11b0295904652f57e0d7f8d42b89c75f63e' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'address', name: 'user', type: 'address' },
          { indexed: true, internalType: 'uint256', name: 'serverId', type: 'uint256' },
        ],
        name: 'ServerUntrusted',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xf1d26b191b1bee9baaf9392419d2859b11482d15e585cb16aa6e73cdc83fba32' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'jobId', type: 'uint256' },
          { indexed: false, internalType: 'address', name: 'teeAddress', type: 'address' },
        ],
        name: 'JobSubmitted',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'bytes32', name: 'role', type: 'bytes32' },
          { indexed: true, internalType: 'address', name: 'account', type: 'address' },
          { indexed: true, internalType: 'address', name: 'sender', type: 'address' },
        ],
        name: 'RoleRevoked',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xf7436df7219248bc2f072a77aa8be840fb4e86e33d86f21a8f46baa90bf968ce' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'epochId', type: 'uint256' },
          { indexed: true, internalType: 'uint256', name: 'dlpId', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'tradingVolume', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'uniqueContributors', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'dataAccessFees', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'tradingVolumeScore', type: 'uint256' },
          {
            indexed: false,
            internalType: 'uint256',
            name: 'uniqueContributorsScore',
            type: 'uint256',
          },
          { indexed: false, internalType: 'uint256', name: 'dataAccessFeesScore', type: 'uint256' },
        ],
        name: 'EpochDlpPerformancesSaved',
        type: 'event',
      },
    ] as const,
  ],
  [
    '0xffdaf13b1d96bfc2213355f353f84c19493e0681eb0df26f83d862acd266750a' as `0x${string}`,
    [
      {
        anonymous: false,
        inputs: [
          { indexed: true, internalType: 'uint256', name: 'entityId', type: 'uint256' },
          { indexed: true, internalType: 'address', name: 'staker', type: 'address' },
          { indexed: false, internalType: 'uint256', name: 'amount', type: 'uint256' },
          { indexed: false, internalType: 'uint256', name: 'sharesBurned', type: 'uint256' },
        ],
        name: 'Unstaked',
        type: 'event',
      },
    ] as const,
  ],
] as const);
